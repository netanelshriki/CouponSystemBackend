{"version":3,"sources":["Components/Redux/AuthState.ts","Services/Notifilcation.ts","Components/Redux/CouponGetState.ts","Components/Redux/CouponsState.ts","Components/Redux/EmployeesSatate.ts","Components/Redux/Store.ts","Services/interceptor.ts","UserModel/clientTypeModel.ts","Services/Globals.ts","Components/AuthArea/Login/Login.tsx","Components/AuthArea/Logout/Logout.tsx","Components/AuthArea/Register/Register.tsx","Components/EmployeeArea/Layout/Layout.tsx","Components/HomeArea/Cards/Cards.tsx","Components/EmployeeArea/AddCustomer/AddCustomer.tsx","Components/HomeArea/Papering/Papering.tsx","Components/HomeArea/Information/Information.tsx","Components/EmployeeArea/EditCustomer/EditCustomer.tsx","Components/EmployeeArea/AllCompanies/AllCompanies.tsx","Components/CompanyArea/CompanyPlace/CompanyPlace.tsx","Components/CustomerArea/CustomerCoupons/CustomerCoupons.tsx","Components/CustomerArea/CustomerDetails/CustomerDetails.tsx","Components/CompanyArea/CompanyDetails/CompanyDetails.tsx","Components/CompanyArea/CompanyAdvanced/CompanyAdvanced.tsx","Components/CompanyArea/CouponsCategory/CouponsCategory.tsx","Components/HomeArea/Coupons/Coupons.tsx","Components/EmployeeArea/AddCompany/AddCompany.tsx","Components/EmployeeArea/EditCompany/EditCompany.tsx","Components/CustomerArea/CustomerAdvanced/CustomerAdvanced.tsx","Components/CustomerArea/CustomerCategory/CustomerCategory.tsx","Components/CustomerArea/CustomerOptions/CustomerOptions.tsx","Components/EmployeeArea/OneCustomer/OneCustomer.tsx","Components/CompanyArea/AddCoupon/AddCoupon.tsx","Components/CompanyArea/CompanyOptions/CompanyOptions.tsx","Components/CompanyArea/EditCoupon/EditCoupon.tsx","Components/AuthArea/RegisterCompany/RegisterCompany.tsx","Components/HomeArea/Paypal/Paypal.tsx","Components/HomeArea/Routing/Routing.tsx","Components/HomeArea/SideBar/SideBar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AuthActionType","notify","notification","Notyf","duration","position","x","y","message","this","success","error","AuthAppState","client","storedUser","JSON","parse","localStorage","getItem","registerAction","type","Register","payload","loginAction","Login","CouponActionType","CouponGetAppState","coupons","CouponAppState","EmployeesActionType","EmployeesAppState","employees","EmployeesAddedAction","employee","EmployeesAdded","EmployeesUpdatedAction","EmployeesUpdated","reducers","combineReducers","employeeState","currentState","action","newState","EmployeesDownloaded","push","idx","findIndex","c","id","EmployeesDeleted","filter","e","authState","setItem","stringify","Logout","removeItem","couponsState","couponDownloaded","couponAdded","couponUpdated","couponDeleted","couponsGetState","couponGeDownloaded","couponGetAdded","couponGetUpdated","couponGetDeleted","store","createStore","tokenAxios","axios","create","interceptors","request","use","headers","getState","token","ClientType","Globals","globals","urls","customers","admin","company","images","useStyles","makeStyles","theme","root","minWidth","pos","marginBottom","marginLeft","formControl","margin","spacing","box","maxWidth","marginTop","withoutLabel","textField","width","btn","useForm","register","handleSubmit","errors","formState","history","useHistory","classes","useState","open","setOpen","React","showPassword","values","setValues","handleChange","prop","event","target","value","credentials","a","console","log","post","response","data","dispatch","Box","className","Card","square","CardContent","Typography","onSubmit","FormControl","variant","clsx","InputLabel","OutlinedInput","minLength","endAdornment","InputAdornment","IconButton","edge","labelWidth","FormHelperText","email","htmlFor","onChange","onClick","onMouseDown","preventDefault","Visibility","VisibilityOff","password","Select","labelId","defaultValue","onClose","onOpen","required","MenuItem","customer","Button","color","useEffect","stam","odstam","user","customerRegister","firstName","lastName","clientType","maxLength","goBack","Layout","gets","setGet","setEmployee","get","axiosGet","res","map","TableBody","TableRow","TableCell","align","delete","then","Table","TableHead","title","fontSize","fontFamily","cover","backgroundImage","backgroundPosition","padding","marginRight","transform","info","backgroundColor","opacity","Cards","props","useSpring","to","from","delay","config","molasses","div","style","gutterBottom","CardActions","size","component","NavLink","activeClassName","exact","AddEmployee","employeesend","added","createStyles","display","flexWrap","height","Papering","Paper","Information","EditEmployee","currentId","match","params","find","put","AllCompanies","card","transition","paper","expand","transitions","shortest","media","tooltip","expandOpen","CompanyPlace","couponsUpdate","setCouponsUpdate","companyId","coupon","imageID","result","Grid","description","CardMedia","image","Tooltip","arrow","deleteCoupon","updateCoupon","amount","container","payment","CustomerCoupons","setGets","expanded","setExpanded","handleExpandClick","customerId","disableSpacing","Collapse","in","timeout","unmountOnExit","paragraph","endIcon","CustomerDetails","cust","CompanyDetails","companyID","CompanyAdvanced","send","byMax","prize","length","TextField","label","CouponsCategory","setAge","byCategory","category","Coupons","myCoupon","startDate","endDate","price","buyCoupon","AddCompany","addCompany","EditCompany","putCompany","CustomerAdvanced","CustomerCategory","btn1","ColorButton","withStyles","palette","getContrastText","purple","CustomerOptions","OneCustomer","AddCoupon","setCompany","setCoupon","mode","watch","touchedFields","formData","FormData","append","toString","item","hidden","CompanyOptions","EditCoupon","couponToUpdate","couponImage","couponUpdate","name","RegisterCompany","paypal","Paypal","options","layout","Routing","path","AddCustomer","EditCustomer","list","fullList","textTransform","SideBar","children","left","state","setState","toggleDrawer","anchor","key","setClient","unsubscribe","subscribe","Fragment","Drawer","role","onKeyDown","List","ListItem","button","ListItemIcon","ListItemText","primary","Divider","light","flexGrow","textDecoration","link","tagline","justifyContent","App","darkMode","setDarkMode","reset","gentle","createTheme","ThemeProvider","CssBaseline","Container","Toolbar","h5","Badge","badgeContent","fill","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.df95547d.chunk.js","sourcesContent":["import UserAuthModel from \"../../UserModel/UserAuthModel\";\r\nimport ClientModel from \"../../UserModel/ClientModel\";\r\n\r\n\r\n\r\nexport class AuthAppState{\r\n    public client: ClientModel =null;\r\n\r\n    public constructor(){\r\n        const storedUser = JSON.parse(localStorage.getItem('client'));\r\n        if(storedUser) {\r\n            this.client = storedUser;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n// Step 2 - Define ActionType using enum for all required operations\r\nexport enum AuthActionType {\r\n    Register = \"Register\",\r\n    Login = \"Login\",\r\n    Logout = \"Logout\"\r\n}\r\n\r\n// Step 3 - Define Action Interface to describe actionAction & payload if needed\r\nexport interface AuthAction {\r\n    type: AuthActionType;\r\n    payload?: any; // ? for logout\r\n}\r\n\r\n// Step 4 - Export Action Creators functions that gets payload and return relevant Action\r\nexport function registerAction(client: UserAuthModel): AuthAction {\r\n    return { type: AuthActionType.Register,payload:client };\r\n}\r\n\r\nexport function loginAction(client: ClientModel): AuthAction {\r\n    return { type: AuthActionType.Login ,payload:client};\r\n}\r\n\r\nexport function logoutAction(): AuthAction {\r\n    return { type: AuthActionType.Logout};\r\n}\r\n\r\n// Step 5 - Reducer function perform the required action\r\nexport function authReducer(currentState: AuthAppState = new AuthAppState(),\r\n                            action:AuthAction): AuthAppState{\r\n    // const newState = new CatsAppState();\r\n    // newState.cats = currentState.cats;\r\n\r\n    const newState = {...currentState} //Spread Operator\r\n    switch(action.type){\r\n        case AuthActionType.Register: //Payload is registered user from backend\r\n            newState.client = action.payload;\r\n            localStorage.setItem(\"client\",JSON.stringify(newState.client)); // Saving in the session storage (won't be deleted)\r\n            break;\r\n        case AuthActionType.Login://Payload is logged i user from backend\r\n            newState.client = action.payload;\r\n            localStorage.setItem(\"client\",JSON.stringify(newState.client)); // Saving in the session storage (won't be deleted)\r\n            break;\r\n        case AuthActionType.Logout: // No payload\r\n        newState.client = null;\r\n            localStorage.removeItem(\"client\");\r\n          \r\n            break;\r\n            \r\n    }\r\n    return newState;\r\n    \r\n}","import {Notyf} from 'notyf';\n\nclass Notify{\n\n    private notification = new Notyf({duration:4000, position:{x:\"left\",y:\"top\"}});\n    public success(message: string){\n        this.notification.success(message);\n    }\n\n    public error(message: string){\n        this.notification.error(message);\n    }\n}\nconst notify = new Notify();\nexport default notify;","import CouponGet from \"../../UserModel/CouponGet\";\r\n\r\n\r\n\r\n// Step 1 - Create AppState and manage the collection once and in a centralize place\r\nexport class  CouponGetAppState {\r\n    public coupons: CouponGet[] = [];\r\n}\r\n\r\n\r\nexport enum CouponActionType {\r\n    couponGeDownloaded = \" couponGeDownloaded\",\r\n    couponGetAdded = \" couponGetAdded\",\r\n    couponGetUpdated = \" couponGetUpdated\",\r\n    couponGetDeleted = \" couponGetDeleted\"\r\n\r\n\r\n}\r\n\r\n// Step 3 - Define Action Interface to describe actionAction & payload if needed\r\nexport interface CouponGetAction {\r\n    type: CouponActionType;\r\n    payload?: any;\r\n}\r\n\r\n// Step 4 - Export Action Creators functions that gets payload and return relevant Action\r\nexport function CouponGetDownloadedAction(coupon: CouponGet[]):  CouponGetAction{\r\n    return { type: CouponActionType.couponGeDownloaded, payload: coupon };\r\n}\r\n\r\nexport function CouponGetAddedAction(coupon: CouponGet): CouponGetAction {\r\n    return { type: CouponActionType.couponGetAdded, payload: coupon };\r\n}\r\n\r\nexport function CouponGetkUpdatedAction(coupon: CouponGet): CouponGetAction {\r\n    return { type: CouponActionType.couponGetUpdated, payload: coupon };\r\n}\r\n\r\nexport function  CouponkGetDeletedAction(id:number):  CouponGetAction {\r\n    return { type:CouponActionType.couponGetDeleted, payload: id };\r\n}\r\n\r\n// Step 5 - Reducer function perform the required action\r\nexport function CouponGetReducer(currentState:  CouponGetAppState = new  CouponGetAppState(),action:CouponGetAction): CouponGetAppState{\r\n   \r\n\r\n    const newState = {...currentState} \r\n    switch(action.type){\r\n        case CouponActionType.couponGeDownloaded:\r\n            newState.coupons = action.payload;\r\n            break;\r\n        case CouponActionType.couponGetAdded:\r\n            newState.coupons.push(action.payload);\r\n            break;\r\n        case CouponActionType.couponGetUpdated:\r\n              const idx = newState.coupons.findIndex(c => c.id === action.payload.id);\r\n              newState.coupons[idx]=action.payload;    \r\n            break\r\n            case CouponActionType.couponGetDeleted:\r\n                  newState.coupons = newState.coupons.filter(c => c.id === action.payload.id);\r\n         \r\n                break\r\n    }\r\n    return newState;\r\n    \r\n}","import Coupon from \"../../UserModel/Coupon\";\r\n\r\n\r\n// Step 1 - Create AppState and manage the collection once and in a centralize place\r\nexport class  CouponAppState {\r\n    public coupons: Coupon[] = [];\r\n}\r\n\r\n\r\nexport enum CouponActionType {\r\n    couponDownloaded = \" couponDownloaded\",\r\n    couponAdded = \" CouponAdded\",\r\n    couponUpdated = \" CouponUpdated\",\r\n    couponDeleted = \" CouponDeleted\"\r\n\r\n\r\n}\r\n\r\n// Step 3 - Define Action Interface to describe actionAction & payload if needed\r\nexport interface CouponAction {\r\n    type: CouponActionType;\r\n    payload?: any;\r\n}\r\n\r\n// Step 4 - Export Action Creators functions that gets payload and return relevant Action\r\nexport function CouponDownloadedAction(coupon: Coupon[]):  CouponAction{\r\n    return { type: CouponActionType.couponDownloaded, payload: coupon };\r\n}\r\n\r\nexport function CouponAddedAction(coupon: Coupon): CouponAction {\r\n    return { type: CouponActionType.couponAdded, payload: coupon };\r\n}\r\n\r\nexport function CouponkUpdatedAction(coupon: Coupon): CouponAction {\r\n    return { type: CouponActionType.couponUpdated, payload: coupon };\r\n}\r\n\r\nexport function  CouponkDeletedAction(id:number):  CouponAction {\r\n    return { type:CouponActionType.couponDeleted, payload: id };\r\n}\r\n\r\n// Step 5 - Reducer function perform the required action\r\nexport function  CouponReducer(currentState:  CouponAppState = new  CouponAppState(),action:CouponAction): CouponAppState{\r\n   \r\n\r\n    const newState = {...currentState} \r\n    switch(action.type){\r\n        case CouponActionType.couponDownloaded:\r\n            newState.coupons = action.payload;\r\n            break;\r\n        case CouponActionType.couponAdded:\r\n            newState.coupons.push(action.payload);\r\n            break;\r\n        case CouponActionType.couponUpdated:\r\n              const idx = newState.coupons.findIndex(c => c.id === action.payload.id);\r\n              newState.coupons[idx]=action.payload;    \r\n            break\r\n            case CouponActionType.couponDeleted:\r\n                  newState.coupons = newState.coupons.filter(c => c.id === action.payload.id);\r\n         \r\n                break\r\n    }\r\n    return newState;\r\n    \r\n}","import UserModel from \"../../UserModel/UserModel\";\r\n\r\n\r\n// Step 1 - Create AppState and manage the collection once and in a centralize place\r\nexport class EmployeesAppState {\r\n    public employees: UserModel[] = [];\r\n}\r\n\r\n// Step 2 - Define ActionType using enum for all required operations\r\n// export enum CatsActionType {\r\n//     CatsDownloaded,\r\n//     CatAdded,\r\n//     CatUpdated,\r\n//     CatDeleted\r\n// }\r\nexport enum EmployeesActionType {\r\n    EmployeesDownloaded = \"EmployeesDownloaded\",\r\n    EmployeesAdded = \"EmployeesAdded\",\r\n    EmployeesUpdated = \"EmployeesUpdated\",\r\n    EmployeesDeleted = \"EmployeesDeleted\"\r\n}\r\n\r\n// Step 3 - Define Action Interface to describe actionAction & payload if needed\r\nexport interface EmployeeAction {\r\n    type: EmployeesActionType;\r\n    payload?: any;\r\n}\r\n\r\n// Step 4 - Export Action Creators functions that gets payload and return relevant Action\r\nexport function EmployeesDownloadedAction(employees: UserModel[]): EmployeeAction {\r\n    return { type: EmployeesActionType.EmployeesDownloaded, payload: employees };\r\n}\r\n\r\nexport function EmployeesAddedAction(employee: UserModel): EmployeeAction {\r\n    return { type: EmployeesActionType.EmployeesAdded, payload: employee };\r\n}\r\n\r\nexport function EmployeesUpdatedAction(employee: UserModel): EmployeeAction {\r\n    return { type: EmployeesActionType.EmployeesUpdated, payload: employee };\r\n}\r\n\r\nexport function EmployeesDeletedAction(id:number): EmployeeAction {\r\n    return { type: EmployeesActionType.EmployeesDeleted, payload: id };\r\n}\r\n\r\n// Step 5 - Reducer function perform the required action\r\nexport function employeesReducer(currentState: EmployeesAppState = new EmployeesAppState(),action:EmployeeAction): EmployeesAppState{\r\n    // const newState = new EmployeesAppState();\r\n    // newState.employees = currentState.employees;\r\n\r\n    const newState = {...currentState} //Spread Operator\r\n    switch(action.type){\r\n        case EmployeesActionType.EmployeesDownloaded:\r\n            newState.employees = action.payload;\r\n            break;\r\n        case EmployeesActionType.EmployeesAdded:\r\n            newState.employees.push(action.payload);\r\n            break;\r\n        case EmployeesActionType.EmployeesUpdated:\r\n              const idx = newState.employees.findIndex(c => c.id === action.payload.id);\r\n              newState.employees[idx]=action.payload;    \r\n            break\r\n            case EmployeesActionType.EmployeesDeleted:\r\n                  newState.employees = newState.employees.filter(e => e.id === action.payload.id);\r\n                 // newState.cats.fil\r\n                break\r\n    }\r\n    return newState;\r\n    \r\n}\r\n","import { combineReducers, createStore } from \"redux\";\r\nimport { authReducer } from \"./AuthState\";\r\nimport { CouponGetReducer } from \"./CouponGetState\";\r\nimport { CouponReducer } from \"./CouponsState\";\r\nimport { employeesReducer } from \"./EmployeesSatate\";\r\n\r\n\r\n// Single Reducer\r\n//const store = createStore(catsReducer);\r\n\r\n\r\n// For getting data\r\n//const xys = store.getState().cats;\r\n\r\n\r\n//Multiple catsReducer\r\nconst reducers = combineReducers({employeeState: employeesReducer,authState: authReducer, couponsState: CouponReducer, couponsGetState: CouponGetReducer});\r\nconst store = createStore(reducers)\r\n\r\n// For getting data\r\n//const xyz = store.getState().catState.cats;\r\n\r\nexport default store;","import axios from \"axios\";\nimport store from \"../Components/Redux/Store\";\n\nconst tokenAxios = axios.create();\n\ntokenAxios.interceptors.request.use(request => {\n\n    request.headers = {\n        \"Authorization\": store.getState().authState.client?.token\n    };\n\n    return request;\n});\n\nexport default tokenAxios;","enum ClientType {\r\n    admin = \"ADMIN\",\r\n    company = \"COMPANY\",\r\n    customer = \"CUSTOMER\",\r\n    type = \"TYPE\",\r\n};\r\nexport default ClientType;\r\n","class Globals{\n}\n\nclass DevelopmentGlobals extends Globals{\n    public urls = {\n        customers:  \"http://localhost:8080/customer/\",\n        admin:  \"http://localhost:8080/admin/\",\n        company: \"http://localhost:8080/company/\",\n        client: \"http://localhost:8080/client/\",\n        images: \"http://localhost:8080/client/coupons/images/\"\n    }\n}\n\nclass ProductionGlobals extends Globals{\n    public urls = {\n        customers:  \"/customers/\",\n        admin:  \"/admin/\",\n        company: \"/company/\",\n        client: \"/client/\",\n        images: \"client/coupons/images/\"\n     \n    }\n}\n\nconst globals = process.env.NODE_ENV === 'production' ? new ProductionGlobals() : new DevelopmentGlobals();\n\nexport default globals;","import \"./Login.css\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  FormHelperText,\r\n  InputLabel,\r\n  makeStyles,\r\n  MenuItem,\r\n  Select,\r\n  TextField,\r\n  Typography,\r\n  FormControl,\r\n  IconButton,\r\n  InputAdornment,\r\n  OutlinedInput,\r\n} from \"@material-ui/core\";\r\nimport clsx from \"clsx\";\r\n\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport notify from \"../../../Services/Notifilcation\";\r\nimport { loginAction } from \"../../Redux/AuthState\";\r\nimport store from \"../../Redux/Store\";\r\nimport tokenAxios from \"../../../Services/interceptor\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport CredentialsModel from \"../../../UserModel/CredentialsModel\";\r\nimport { useState } from \"react\";\r\nimport ClientModel from \"../../../UserModel/ClientModel\";\r\nimport ClientType from \"../../../UserModel/clientTypeModel\";\r\nimport { Visibility, VisibilityOff } from \"@material-ui/icons\";\r\nimport React from \"react\";\r\nimport globals from \"../../../Services/Globals\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    minWidth: 275,\r\n  },\r\n\r\n  pos: {\r\n    marginBottom: 0,\r\n    marginLeft: \"39%\",\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n marginLeft: \"25%\"\r\n  },\r\n  box: {\r\n    marginLeft: \"39%\",\r\n    maxWidth: \"50px\",\r\n    marginTop: \"70px\",\r\n  },\r\n  withoutLabel: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  textField: {\r\n    width: \"25ch\",\r\n  },\r\n  btn: {\r\n    marginLeft: theme.spacing(4),\r\n  },\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n    marginLeft: \"20px\",\r\n  },\r\n}));\r\n\r\nfunction Login(): JSX.Element {\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm<CredentialsModel>();\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n  const [age, setAge] = useState<string | number>(\"\");\r\n\r\n  const [values, setValues] = React.useState({\r\n    showPassword: false,\r\n  });\r\n\r\n  const handleChange = (prop) => (event) => {\r\n    setValues({ ...values, [prop]: event.target.value });\r\n  };\r\n\r\n  const handleClickShowPassword = () => {\r\n    setValues({ ...values, showPassword: !values.showPassword });\r\n  };\r\n\r\n  const handleMouseDownPassword = (event) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  // const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n  //   setAge(event.target.value as number);\r\n  // };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  async function send(credentials: CredentialsModel) {\r\n    console.log(credentials);\r\n    // \"http://localhost:8080/client/login\",\r\n    try {\r\n      const response = await tokenAxios.post<ClientModel>(\r\nglobals.urls.client+\"login\"\r\n        ,        credentials\r\n      );\r\n      console.log(response.data);\r\n\r\n      store.dispatch(loginAction(response.data));\r\n      notify.success(\"login successful!\");\r\n      history.push(\"/home\");\r\n    } catch (err) {\r\n      notify.error(\"something went wrong\");\r\n      // notify.error(err?.message);\r\n   \r\n    }\r\n  }\r\n\r\n  return (\r\n    <Box className={classes.box}>\r\n      <div className=\"Login\">\r\n        <Card className={classes.root} square >\r\n          <CardContent>\r\n            <Typography className={classes.pos}>Login</Typography>\r\n            <br />\r\n            <form onSubmit={handleSubmit(send)}>\r\n             \r\n              {/* <TextField\r\n                id=\"outlined-basic\"\r\n                label=\"email\"\r\n                variant=\"outlined\"\r\n                name=\"email\"\r\n                type=\"email\"\r\n                {...register(\"email\", {\r\n                  required: {\r\n                    value: true,\r\n                    message: \"your email is required\",\r\n                  },\r\n                  pattern: {\r\n                    value: /^\\S+@\\S+$/i,\r\n                    message: \"your email required\",\r\n                  },\r\n                })}\r\n              />\r\n              <br />\r\n              <FormHelperText error={true}>\r\n                {errors.email?.message}\r\n              </FormHelperText>\r\n              <br />\r\n              \r\n              <TextField\r\n                id=\"outlined-basic\"\r\n                label=\"password\"\r\n                variant=\"outlined\"\r\n                name=\"password\"\r\n                type=\"password\"\r\n                {...register(\"password\", {\r\n                  minLength: {\r\n                    value: 5,\r\n                    message: \"your password can not be less than 5 chars\",\r\n                  },\r\n                })}\r\n              />\r\n              <br />\r\n              <FormHelperText error={true}>\r\n                {errors.password?.message}\r\n              </FormHelperText> */}\r\n\r\n        <FormControl\r\n                variant=\"outlined\"\r\n                className={clsx(classes.margin, classes.textField)}\r\n              >\r\n                {\" \"}\r\n                <InputLabel>Email</InputLabel>\r\n                <OutlinedInput\r\n                  id=\"outlined-adornment-password\"\r\n                  type=\"email\"\r\n                  {...register(\"email\", {\r\n                    minLength: {\r\n                      value: 5,\r\n                      message: \"you must insert email\",\r\n                    },\r\n                  })}\r\n                  endAdornment={\r\n                    <InputAdornment position=\"end\">\r\n                      <IconButton\r\n                        aria-label=\"toggle password visibility\"\r\n                        edge=\"end\"\r\n                      ></IconButton>\r\n                    </InputAdornment>\r\n                  }\r\n                  labelWidth={45}\r\n                />\r\n              </FormControl>\r\n\r\n              <FormHelperText error={true}>\r\n                {errors.email?.message}\r\n              </FormHelperText>\r\n\r\n              <br />\r\n\r\n              <FormControl\r\n                className={clsx(classes.margin, classes.textField)}\r\n                variant=\"outlined\"\r\n              >\r\n                <InputLabel htmlFor=\"outlined-adornment-password\">\r\n                  Password\r\n                </InputLabel>\r\n                <OutlinedInput\r\n                  id=\"outlined-adornment-password\"\r\n                  type={values.showPassword ? \"text\" : \"password\"}\r\n                  onChange={handleChange(\"password\")}\r\n                  {...register(\"password\", {\r\n                    minLength: {\r\n                      value: 5,\r\n                      message: \"your password can not be less than 5 chars\",\r\n                    },\r\n                  })}\r\n                  endAdornment={\r\n                    <InputAdornment position=\"end\">\r\n                      <IconButton\r\n                        aria-label=\"toggle password visibility\"\r\n                        onClick={handleClickShowPassword}\r\n                        onMouseDown={handleMouseDownPassword}\r\n                        edge=\"end\"\r\n                      >\r\n                        {values.showPassword ? (\r\n                          <Visibility />\r\n                        ) : (\r\n                          <VisibilityOff />\r\n                        )}\r\n                      </IconButton>\r\n                    </InputAdornment>\r\n                  }\r\n                  labelWidth={70}\r\n                />\r\n              </FormControl>\r\n\r\n              <FormHelperText error={true}>\r\n                {errors.password?.message}\r\n              </FormHelperText>\r\n\r\n           \r\n              <FormControl className={classes.formControl}>\r\n                <InputLabel id=\"demo-controlled-open-select-label\">\r\n                  Client Type\r\n                </InputLabel>\r\n                <Select\r\n                  labelId=\"demo-controlled-open-select-label\"\r\n                  id=\"demo-controlled-open-select\"\r\n                \r\n                  defaultValue={ClientType.type}\r\n                  open={open}\r\n                  onClose={handleClose}\r\n                  onOpen={handleOpen}\r\n                  onChange={handleChange}\r\n                  {...register(\"clientType\", {\r\n                    required: { value: true, message: \"Missing User Type\" },\r\n                  })}\r\n                >\r\n                \r\n                  <MenuItem value=\"\">\r\n                    <em>Type:</em>\r\n                 </MenuItem>\r\n                  <MenuItem value={ClientType.customer}>CUSTOMER</MenuItem>\r\n                  <MenuItem value={ClientType.admin}>ADMIN</MenuItem>\r\n                  <MenuItem value={ClientType.company}>COMPANY</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n              \r\n              {/* <FormControl className={classes.formControl}>\r\n                <InputLabel id=\"demo-controlled-open-select-label\">\r\n                  Client Type\r\n                </InputLabel>\r\n                <Select\r\n                  labelId=\"demo-controlled-open-select-label\"\r\n                  id=\"demo-controlled-open-select\"\r\n              \r\n                  open={open}\r\n                  onClose={handleClose}\r\n                  onOpen={handleOpen}\r\n                  onChange={handleChange}\r\n                  {...register(\"clientType\", {\r\n                    required: { value: true, message: \"Missing User Type\" },\r\n                  })}\r\n                >\r\n                \r\n                  <MenuItem value=\"\">\r\n                    <em>Type:</em>\r\n                 </MenuItem>\r\n                  <MenuItem value=\"CUSTOMER\">CUSTOMER</MenuItem>\r\n                  <MenuItem value=\"ADMIN\">ADMIN</MenuItem>\r\n                  <MenuItem value='COMPANY'>COMPANY</MenuItem>\r\n                </Select>\r\n              </FormControl> */}\r\n\r\n              <br />\r\n              <br />\r\n\r\n              <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.btn}\r\n              >\r\n                Login\r\n              </Button>\r\n\r\n              <Button\r\n            onClick={() => history.push(\"/home\")}\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            className={classes.btn}\r\n          >\r\n            back\r\n          </Button>\r\n            </form>\r\n          </CardContent>\r\n\r\n       \r\n        </Card>\r\n      </div>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport notify from \"../../../Services/Notifilcation\";\nimport { logoutAction } from \"../../Redux/AuthState\";\nimport store from \"../../Redux/Store\";\nimport \"./Logout.css\";\n\nfunction Logout(): JSX.Element {\n    const history = useHistory();\n\n    useEffect(()=> //React Hook for running side effects inside a fc\n    { \n        notify.success(\"logout successfully!\");\n        store.dispatch(logoutAction());\n        history.push(\"/home\");\n    });\n\n    \n    return (\n        <></>\n    );\n}\n\nexport default Logout;\n","import \"./Register.css\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  FormControl,\r\n  FormHelperText,\r\n  IconButton,\r\n  InputAdornment,\r\n  InputLabel,\r\n  makeStyles,\r\n  MenuItem,\r\n  OutlinedInput,\r\n  Select,\r\n  TextField,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport notify from \"../../../Services/Notifilcation\";\r\nimport UserModel from \"../../../UserModel/UserModel\";\r\nimport { EmployeesAddedAction } from \"../../Redux/EmployeesSatate\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport Papering from \"../../HomeArea/Papering/Papering\";\r\nimport { useState } from \"react\";\r\nimport UserAuthModel from \"../../../UserModel/UserAuthModel\";\r\nimport store from \"../../Redux/Store\";\r\nimport { registerAction } from \"../../Redux/AuthState\";\r\nimport clsx from \"clsx\";\r\nimport { Visibility, VisibilityOff } from \"@material-ui/icons\";\r\nimport React from \"react\";\r\nimport ClientModel from \"../../../UserModel/ClientModel\";\r\nimport tokenAxios from \"../../../Services/interceptor\";\r\nimport globals from \"../../../Services/Globals\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    minWidth: 275,\r\n  },\r\n  btn: {\r\n    marginLeft: theme.spacing(3),\r\n  },\r\n  textField: {\r\n    width: \"25ch\",\r\n  },\r\n  pos: {\r\n    marginBottom: 0,\r\n    marginLeft: theme.spacing(4.2),\r\n  },\r\n\r\n  box: {\r\n    marginLeft: \"39%\",\r\n    maxWidth: \"50px\",\r\n    marginTop: \"40px\",\r\n  },\r\n  stam: {\r\n    marginLeft: \"39%\",\r\n    marginTop: \"30px\",\r\n  },\r\n  odstam: {\r\n    marginLeft: \"32%\",\r\n    marginTop: \" 20px\",\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n marginLeft: \"25%\"\r\n  },\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n    marginLeft: \"20px\",\r\n  },\r\n}));\r\n\r\nfunction Register(): JSX.Element {\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm<UserModel>();\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  const [age, setAge] = useState<string | number>(\"\");\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const [values, setValues] = React.useState({\r\n    showPassword: false,\r\n  });\r\n\r\n  const handleChange = (prop) => (event) => {\r\n    setValues({ ...values, [prop]: event.target.value });\r\n  };\r\n\r\n  const handleClickShowPassword = () => {\r\n    setValues({ ...values, showPassword: !values.showPassword });\r\n  };\r\n\r\n  const handleMouseDownPassword = (event) => {\r\n    event.preventDefault();\r\n  };\r\n  async function send(user: UserAuthModel) {\r\n    const customerRegister = {\r\n      // id: user.id,\r\n      firstName: user.firstName,\r\n      lastName: user.lastName,\r\n      email: user.email,\r\n      password: user.password,\r\n      clientType: \"CUSTOMER\"\r\n    }\r\n    try {\r\n      // \"http://localhost:8080/customer/register\",\r\n\r\n      const response = await axios.post<ClientModel>(globals.urls.customers+\"register\",\r\n        customerRegister\r\n      );\r\n\r\n      store.dispatch(registerAction(response.data));\r\n\r\n      notify.success(\"register successfully!\");\r\n      history.push(\"/home\");\r\n    } catch (err) {\r\n      notify.error(\"something went wrong!\");\r\n    }\r\n  }\r\n\r\n  \r\n  return (\r\n    <Box className={classes.box}>\r\n      <div>\r\n        <Card className={classes.root}>\r\n          <CardContent>\r\n            <Typography className={classes.pos}>\r\n              Register for Customer\r\n            </Typography>\r\n            <br />\r\n            <form onSubmit={handleSubmit(send)}>\r\n              {/* <TextField\r\n                id=\"outlined-basic\"\r\n                label=\"name\"\r\n                variant=\"outlined\"\r\n                type=\"text\"\r\n                {...register(\"firstName\", {\r\n                  required: {\r\n                    value: true,\r\n                    message: \"your name is required\",\r\n                  },\r\n                  maxLength: {\r\n                    value: 30,\r\n                    message: \"your name can not be greater than 30\",\r\n                  },\r\n                  minLength: {\r\n                    value: 2,\r\n                    message: \"your name can not be less than 2 chars\",\r\n                  },\r\n                })}\r\n              />\r\n\r\n              <br />\r\n              <FormHelperText error={true}>\r\n                {errors.firstName?.message}\r\n              </FormHelperText>\r\n              <br />\r\n\r\n              <TextField\r\n                id=\"outlined-basic\"\r\n                label=\"name\"\r\n                variant=\"outlined\"\r\n                type=\"text\"\r\n                {...register(\"lastName\", {\r\n                  required: {\r\n                    value: true,\r\n                    message: \"your name is required\",\r\n                  },\r\n                  maxLength: {\r\n                    value: 30,\r\n                    message: \"your name can not be greater than 30\",\r\n                  },\r\n                  minLength: {\r\n                    value: 2,\r\n                    message: \"your name can not be less than 2 chars\",\r\n                  },\r\n                })}\r\n              />\r\n\r\n              <br />\r\n              <FormHelperText error={true}>\r\n                {errors.lastName?.message}\r\n              </FormHelperText>\r\n              <br />\r\n\r\n              <TextField\r\n                id=\"outlined-basic\"\r\n                label=\"email\"\r\n                variant=\"outlined\"\r\n                type=\"email\"\r\n                {...register(\"email\", {\r\n                  required: {\r\n                    value: true,\r\n                    message: \"your email is required\",\r\n                  },\r\n                  pattern: {\r\n                    value: /^\\S+@\\S+$/i,\r\n                    message: \"your email required\",\r\n                  },\r\n                })}\r\n              />\r\n              <br />\r\n              <FormHelperText error={true}>\r\n                {errors.email?.message}\r\n              </FormHelperText>\r\n              <br />\r\n              <TextField\r\n                id=\"outlined-basic\"\r\n                label=\"password\"\r\n                variant=\"outlined\"\r\n                type=\"password\"\r\n                {...register(\"password\", {\r\n                  minLength: {\r\n                    value: 5,\r\n                    message: \"your password can not be less than 5 chars\",\r\n                  },\r\n                })}\r\n              />\r\n              <br />\r\n              <FormHelperText error={true}>\r\n                {errors.password?.message}\r\n              </FormHelperText>\r\n\r\n              <br />\r\n              <FormControl className={classes.formControl}>\r\n                <InputLabel id=\"demo-controlled-open-select-label\">\r\n                  Client Type\r\n                </InputLabel>\r\n                <Select\r\n                  labelId=\"demo-controlled-open-select-label\"\r\n                  id=\"demo-controlled-open-select\"\r\n                  open={open}\r\n                  onClose={handleClose}\r\n                  onOpen={handleOpen}\r\n                  onChange={handleChange}\r\n                  {...register(\"clientType\", {\r\n                    required: { value: true, message: \"Missing User Type\" },\r\n                  })}\r\n                > */}\r\n                  {/* <MenuItem value=\"\">\r\n                    <em>Type:</em>\r\n                  </MenuItem>\r\n                  <MenuItem value=\"CUSTOMER\">CUSTOMER</MenuItem>\r\n                </Select>\r\n              </FormControl> */}\r\n\r\n<FormControl\r\n                variant=\"outlined\"\r\n                className={clsx(classes.margin, classes.textField)}\r\n              >\r\n                {\" \"}\r\n                <InputLabel>First Name</InputLabel>\r\n                <OutlinedInput\r\n                  id=\"outlined-adornment-password\"\r\n                  type=\"text\"\r\n                  {...register(\"firstName\", {\r\n                    required: {\r\n                      value: true,\r\n                      message: \"your name is required\",\r\n                    },\r\n                    maxLength: {\r\n                      value: 30,\r\n                      message: \"your name can not be greater than 30\",\r\n                    },\r\n                    minLength: {\r\n                      value: 2,\r\n                      message: \"your name can not be less than 2 chars\",\r\n                    },\r\n                  })}\r\n                  endAdornment={\r\n                    <InputAdornment position=\"end\">\r\n                      <IconButton\r\n                        aria-label=\"toggle password visibility\"\r\n                        edge=\"end\"\r\n                      ></IconButton>\r\n                    </InputAdornment>\r\n                  }\r\n                  labelWidth={80}\r\n                />\r\n              </FormControl>\r\n\r\n              <FormHelperText error={true}>\r\n                {errors.firstName?.message}\r\n              </FormHelperText>\r\n\r\n            \r\n\r\n              <FormControl\r\n                variant=\"outlined\"\r\n                className={clsx(classes.margin, classes.textField)}\r\n              >\r\n                {\" \"}\r\n                <InputLabel>Last name</InputLabel>\r\n                <OutlinedInput\r\n                  id=\"outlined-adornment-password\"\r\n                  type=\"text\"\r\n                  {...register(\"lastName\", {\r\n                    required: {\r\n                      value: true,\r\n                      message: \"your name is required\",\r\n                    },\r\n                    maxLength: {\r\n                      value: 30,\r\n                      message: \"your name can not be greater than 30\",\r\n                    },\r\n                    minLength: {\r\n                      value: 2,\r\n                      message: \"your name can not be less than 2 chars\",\r\n                    },\r\n                  })}\r\n                  endAdornment={\r\n                    <InputAdornment position=\"end\">\r\n                      <IconButton\r\n                        aria-label=\"toggle password visibility\"\r\n                        edge=\"end\"\r\n                      ></IconButton>\r\n                    </InputAdornment>\r\n                  }\r\n                  labelWidth={80}\r\n                />\r\n              </FormControl>\r\n\r\n              <FormHelperText error={true}>\r\n                {errors.lastName?.message}\r\n              </FormHelperText>\r\n\r\n        \r\n\r\n              <FormControl\r\n                variant=\"outlined\"\r\n                className={clsx(classes.margin, classes.textField)}\r\n              >\r\n                {\" \"}\r\n                <InputLabel>Email</InputLabel>\r\n                <OutlinedInput\r\n                  id=\"outlined-adornment-password\"\r\n                  type=\"email\"\r\n                  {...register(\"email\", {\r\n                    minLength: {\r\n                      value: 5,\r\n                      message: \"you must insert email\",\r\n                    },\r\n                  })}\r\n                  endAdornment={\r\n                    <InputAdornment position=\"end\">\r\n                      <IconButton\r\n                        aria-label=\"toggle password visibility\"\r\n                        edge=\"end\"\r\n                      ></IconButton>\r\n                    </InputAdornment>\r\n                  }\r\n                  labelWidth={45}\r\n                />\r\n              </FormControl>\r\n\r\n            \r\n              <FormHelperText error={true}>\r\n                {errors.email?.message}\r\n              </FormHelperText>\r\n\r\n              \r\n              <FormControl\r\n                className={clsx(classes.margin, classes.textField)}\r\n                variant=\"outlined\"\r\n              >\r\n                <InputLabel htmlFor=\"outlined-adornment-password\">\r\n                  Password\r\n                </InputLabel>\r\n                <OutlinedInput\r\n                  id=\"outlined-adornment-password\"\r\n                  type={values.showPassword ? \"text\" : \"password\"}\r\n                  onChange={handleChange(\"password\")}\r\n                  {...register(\"password\", {\r\n                    minLength: {\r\n                      value: 5,\r\n                      message: \"your password can not be less than 5 chars\",\r\n                    },\r\n                  })}\r\n                  endAdornment={\r\n                    <InputAdornment position=\"end\">\r\n                      <IconButton\r\n                        aria-label=\"toggle password visibility\"\r\n                        onClick={handleClickShowPassword}\r\n                        onMouseDown={handleMouseDownPassword}\r\n                        edge=\"end\"\r\n                      >\r\n                        {values.showPassword ? (\r\n                          <Visibility />\r\n                        ) : (\r\n                          <VisibilityOff />\r\n                        )}\r\n                      </IconButton>\r\n                    </InputAdornment>\r\n                  }\r\n                  labelWidth={70}\r\n                />\r\n              </FormControl>\r\n\r\n              <FormHelperText error={true}>\r\n                {errors.password?.message}\r\n              </FormHelperText>\r\n              \r\n          \r\n              \r\n              <br />\r\n              <Button\r\n                className={classes.btn}\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n              >\r\n                Register\r\n              </Button>\r\n\r\n              \r\n          <Button\r\n            onClick={() => history.goBack()}\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            className={classes.btn}\r\n          >\r\n            back\r\n          </Button>\r\n            </form>\r\n          </CardContent>\r\n\r\n      \r\n\r\n        </Card>\r\n      </div>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default Register;\r\n","import { useEffect, useState } from \"react\";\r\nimport UserModel from \"../../../UserModel/UserModel\";\r\nimport {\r\n  Button,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n} from \"@material-ui/core\";\r\nimport CreateIcon from \"@material-ui/icons/Create\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport \"./Layout.css\";\r\nimport notify from \"../../../Services/Notifilcation\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport store from \"../../Redux/Store\";\r\nimport tokenAxios from \"../../../Services/interceptor\";\r\nimport { EmployeesDownloadedAction } from \"../../Redux/EmployeesSatate\";\r\nimport globals from \"../../../Services/Globals\";\r\n\r\nfunction Layout() {\r\n  const [gets, setGet] = useState<UserModel[]>([]);\r\n  const history = useHistory();\r\n  const [employee, setEmployee] = useState<UserModel[]>([]);\r\n\r\n\r\n  useEffect(() => {\r\n    if (!store.getState().authState.client) {\r\n      notify.error(\"please login\");\r\n      history.push(\"/login\");\r\n    }\r\n    const axiosGet = async () => {\r\n      // \"http://localhost:8080/admin/customers\"\r\n\r\n      const response = await tokenAxios.get<UserModel[]>(\r\n        globals.urls.admin+\"customers\"\r\n      );\r\n      setGet(response.data);\r\n     \r\n      const customers = response.data;\r\n      store.dispatch(EmployeesDownloadedAction(customers))\r\n     console.log(response.data);\r\n     setEmployee(store.getState().employeeState.employees);\r\nconsole.log(\"employee: \"+employee);\r\n    \r\n    };\r\n    axiosGet();\r\n  \r\n  }, [gets]);\r\n\r\n  function deletePost(id) {\r\n    tokenAxios\r\n    // \"http://localhost:8080/admin/customers/\"\r\n      .delete<any>(globals.urls.admin+\"customers/\" + id)\r\n      .then(() => {\r\n        notify.success(\"Employee deleted!\");\r\n        setGet([]);\r\n      });\r\n  }\r\n\r\n  function updatePost(id) {\r\n    console.log(id);\r\n    history.push(\"/editcust/\" + id);\r\n    // const result = axios\r\n    //   .put<any>(\"http://localhost:8080/admin/customers/update\")\r\n    //   .then(() => {\r\n    //     notify.success(\"Customer updated!!\");\r\n    //     setGet([]);\r\n    //   });\r\n  }\r\n\r\n  const res = gets.map((get) => {\r\n    return (\r\n      <TableBody key={get.id}>\r\n        <TableRow >\r\n          <TableCell>{get.id} </TableCell>\r\n          <TableCell align=\"right\">{get.firstName}</TableCell>\r\n          <TableCell align=\"right\">{get.lastName}</TableCell>\r\n          <TableCell align=\"right\">{get.email}</TableCell>\r\n          <TableCell align=\"right\">{get.password}</TableCell>\r\n          <TableCell align=\"right\">{get.clientType}</TableCell>\r\n          <TableCell align=\"right\">\r\n            <Button>\r\n              <CreateIcon onClick={() => updatePost(get.id)} />\r\n            </Button>\r\n            <Button>\r\n              <DeleteIcon onClick={() => deletePost(get.id)} />\r\n            </Button>\r\n          </TableCell>\r\n        </TableRow>\r\n      </TableBody>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"Layout\">\r\n      <Table className=\"Table\" aria-label=\"simple table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Id</TableCell>\r\n            <TableCell align=\"right\">first name</TableCell>\r\n            <TableCell align=\"right\">last name</TableCell>\r\n            <TableCell align=\"right\"> Email&nbsp;</TableCell>\r\n            <TableCell align=\"right\">Password&nbsp;</TableCell>\r\n            <TableCell align=\"right\">ClientType&nbsp;</TableCell>\r\n            <TableCell align=\"right\">Action&nbsp;</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n\r\n        {gets && res}\r\n      </Table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Layout;\r\n\r\n","import {\r\n  Button,\r\n  CardActions,\r\n  CardContent,\r\n  makeStyles,\r\n} from \"@material-ui/core\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport { Card } from \"@material-ui/core\";\r\nimport \"./Cards.css\";\r\nimport { useSpring, animated, config } from \"react-spring\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  title: {\r\n    fontSize: 40,\r\n    fontFamily: \"Montserrat\",\r\n    color: \"black\",\r\n  },\r\n  cover: {\r\n    backgroundImage:\r\n      \"url(https://previews.123rf.com/images/ekina/ekina1802/ekina180201566/96334084-texture-background-template-pamper-your-design-with-a-luxurious-light-blue-silk-flag-the-blue-dip-ca.jpg)\",\r\n    backgroundPosition: \"center\",\r\n    // backgroundRepeat: \"repeat-y\",\r\n    padding: \"35px 25px\",\r\n    //width: '38rem'\r\n    marginLeft: \"80px\",\r\n    marginRight: \"80px\",\r\n\r\n    \"&:hover\": {\r\n      transform:  \"scale: (0.3)\",\r\n      //transition: \"500ms linear\",\r\n     \r\n    },\r\n  },\r\n  info: {\r\n    color: \"black\",\r\n  },\r\n  btn: {\r\n    \"&:hover\": {\r\n      backgroundColor: \"#2196f3\",\r\n      opacity: \"1.7\",\r\n      color: \"white\",\r\n    },\r\n  },\r\n}));\r\n\r\nfunction Cards(): JSX.Element {\r\n  const props = useSpring({\r\n    to: { opacity: 1 },\r\n    from: { opacity: 0.6 },\r\n    delay: 1000,\r\n    config: config.molasses,\r\n  });\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div>\r\n      <animated.div style={props}>\r\n        <Card className={classes.cover}>\r\n          <CardContent>\r\n            <Typography className={classes.title} gutterBottom>\r\n             check our coupons\r\n            </Typography>\r\n            <Typography variant=\"h5\" className={classes.info}>\r\n             there a lot of coupons just for you!\r\n            </Typography>\r\n          </CardContent>\r\n          <CardActions>\r\n            <Button color=\"primary\" size=\"large\" className={classes.btn} component={NavLink} to={\"/more\"} activeClassName=\"Mui-selected\" exact>\r\n              Read more\r\n            </Button>\r\n          </CardActions>\r\n        </Card>\r\n      </animated.div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Cards;\r\n","import {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  FormControl,\r\n  FormHelperText,\r\n  IconButton,\r\n  InputAdornment,\r\n  InputLabel,\r\n  makeStyles,\r\n  OutlinedInput,\r\n  TextField,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport notify from \"../../../Services/Notifilcation\";\r\nimport UserModel from \"../../../UserModel/UserModel\";\r\nimport { EmployeesAddedAction } from \"../../Redux/EmployeesSatate\";\r\nimport \"./AddCustomer.css\";\r\nimport store from \"../../Redux/Store\";\r\nimport { useEffect, useState } from \"react\";\r\nimport tokenAxios from \"../../../Services/interceptor\";\r\nimport { Visibility, VisibilityOff } from \"@material-ui/icons\";\r\nimport React from \"react\";\r\nimport clsx from \"clsx\";\r\nimport globals from \"../../../Services/Globals\";\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\nroot: {\r\n  minWidth: 275,\r\n},\r\nbtn: {\r\n  marginLeft: theme.spacing(4),\r\n},\r\ntextField: {\r\n  width: \"25ch\",\r\n},\r\npos: {\r\n  marginBottom: 0,\r\n  marginLeft: theme.spacing(6),\r\n},\r\n\r\nbox: {\r\n  marginLeft: \"39%\",\r\n  maxWidth: \"50px\",\r\n  marginTop: \"40px\",\r\n},\r\nstam: {\r\n  marginLeft: \"39%\",\r\n  marginTop: \"30px\",\r\n},\r\nodstam: {\r\n  marginLeft: \"32%\",\r\n  marginTop: \" 20px\",\r\n},\r\nformControl: {\r\n  margin: theme.spacing(1),\r\n  minWidth: 120,\r\nmarginLeft: \"25%\"\r\n},\r\nmargin: {\r\n  margin: theme.spacing(1),\r\n  marginLeft: \"20px\",\r\n},\r\n\r\n\r\n}));\r\n\r\nfunction AddEmployee(): JSX.Element {\r\n\r\n  useEffect(()=>{\r\n    if(!store.getState().authState.client){\r\n        notify.error(\"please login\");\r\n        history.push(\"/login\")\r\n    }\r\n})\r\n\r\n\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm<UserModel>();\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const [values, setValues] = React.useState({\r\n    showPassword: false,\r\n  });\r\n\r\n  const handleChange = (prop) => (event) => {\r\n    setValues({ ...values, [prop]: event.target.value });\r\n  };\r\n\r\n  const handleClickShowPassword = () => {\r\n    setValues({ ...values, showPassword: !values.showPassword });\r\n  };\r\n\r\n  const handleMouseDownPassword = (event) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  async function send(user: UserModel) {\r\n    try {\r\n      const employeesend = {\r\n        firstName: user.firstName,\r\n        lastName: user.lastName,\r\n        email: user.email,\r\n        password: user.password,\r\n        clientType: \"CUSTOMER\",\r\n      };\r\n      // \"http://localhost:8080/customer/register\",\r\n      const post = await tokenAxios.post<UserModel>(\r\n      globals.urls.customers+\"register\",\r\n      \r\n     employeesend\r\n      );\r\n\r\n      const added = post.data;\r\n      store.dispatch(EmployeesAddedAction(added));\r\n\r\n      notify.success(\"Customer \" + user.firstName + \" created!\");\r\n      history.push(\"/customers\");\r\n    } catch (err) {\r\n   \r\n    }\r\n  }\r\n\r\n  return (\r\n  \r\n\r\n    <Box className={classes.box}>\r\n    <div>\r\n      \r\n      <Card  className={classes.root} square>\r\n        <CardContent>\r\n          <Typography className={classes.pos}>Add new Customer</Typography>\r\n        \r\n          <br />\r\n          <form onSubmit={handleSubmit(send)}>\r\n            {/* <TextField\r\n              id=\"outlined-basic\"\r\n              label=\"first name\"\r\n              variant=\"outlined\"\r\n              type=\"firstName\"\r\n              {...register(\"firstName\", {\r\n                required: {\r\n                  value: true,\r\n                  message: \"your name is required\",\r\n                },\r\n                maxLength: {\r\n                  value: 30,\r\n                  message: \"your name can not be greater than 30\",\r\n                },\r\n                minLength: {\r\n                  value: 2,\r\n                  message: \"your name can not be less than 2 chars\",\r\n                },\r\n              })}\r\n            />\r\n\r\n            <br />\r\n            <FormHelperText error={true}>{errors.firstName?.message}</FormHelperText>\r\n            <br />\r\n\r\n            <TextField\r\n              id=\"outlined-basic\"\r\n              label=\"last name\"\r\n              variant=\"outlined\"\r\n              type=\"lastName\"\r\n              {...register(\"lastName\", {\r\n                required: {\r\n                  value: true,\r\n                  message: \"your name is required\",\r\n                },\r\n                maxLength: {\r\n                  value: 30,\r\n                  message: \"your name can not be greater than 30\",\r\n                },\r\n                minLength: {\r\n                  value: 2,\r\n                  message: \"your name can not be less than 2 chars\",\r\n                },\r\n              })}\r\n            />\r\n\r\n            <br />\r\n            <FormHelperText error={true}>{errors.lastName?.message}</FormHelperText>\r\n            <br />\r\n\r\n            <TextField\r\n              id=\"outlined-basic\"\r\n              label=\"email\"\r\n              variant=\"outlined\"\r\n              type=\"email\"\r\n              {...register(\"email\", {\r\n                required: {\r\n                  value: true,\r\n                  message: \"your email is required\",\r\n                },\r\n                pattern: {\r\n                  value: /^\\S+@\\S+$/i,\r\n                  message: \"your email required\",\r\n                },\r\n              })}\r\n            />\r\n            <br />\r\n            <FormHelperText error={true}>{errors.email?.message}</FormHelperText>\r\n            <br />\r\n            <TextField\r\n              id=\"outlined-basic\"\r\n              label=\"password\"\r\n              variant=\"outlined\"\r\n              type=\"password\"\r\n              {...register(\"password\", {\r\n                minLength: {\r\n                  value: 5,\r\n                  message: \"your password can not be less than 5 chars\",\r\n                },\r\n              })}\r\n            />\r\n            <br />\r\n            <FormHelperText error={true}>{errors.password?.message}</FormHelperText> */}\r\n\r\n<FormControl\r\n                variant=\"outlined\"\r\n                className={clsx(classes.margin, classes.textField)}\r\n              >\r\n                {\" \"}\r\n                <InputLabel>First Name</InputLabel>\r\n                <OutlinedInput\r\n                  id=\"outlined-adornment-password\"\r\n                  type=\"text\"\r\n                  {...register(\"firstName\", {\r\n                    required: {\r\n                      value: true,\r\n                      message: \"your name is required\",\r\n                    },\r\n                    maxLength: {\r\n                      value: 30,\r\n                      message: \"your name can not be greater than 30\",\r\n                    },\r\n                    minLength: {\r\n                      value: 2,\r\n                      message: \"your name can not be less than 2 chars\",\r\n                    },\r\n                  })}\r\n                  endAdornment={\r\n                    <InputAdornment position=\"end\">\r\n                      <IconButton\r\n                        aria-label=\"toggle password visibility\"\r\n                        edge=\"end\"\r\n                      ></IconButton>\r\n                    </InputAdornment>\r\n                  }\r\n                  labelWidth={80}\r\n                />\r\n              </FormControl>\r\n\r\n              <FormHelperText error={true}>\r\n                {errors.firstName?.message}\r\n              </FormHelperText>\r\n\r\n            \r\n\r\n              <FormControl\r\n                variant=\"outlined\"\r\n                className={clsx(classes.margin, classes.textField)}\r\n              >\r\n                {\" \"}\r\n                <InputLabel>Last name</InputLabel>\r\n                <OutlinedInput\r\n                  id=\"outlined-adornment-password\"\r\n                  type=\"text\"\r\n                  {...register(\"lastName\", {\r\n                    required: {\r\n                      value: true,\r\n                      message: \"your name is required\",\r\n                    },\r\n                    maxLength: {\r\n                      value: 30,\r\n                      message: \"your name can not be greater than 30\",\r\n                    },\r\n                    minLength: {\r\n                      value: 2,\r\n                      message: \"your name can not be less than 2 chars\",\r\n                    },\r\n                  })}\r\n                  endAdornment={\r\n                    <InputAdornment position=\"end\">\r\n                      <IconButton\r\n                        aria-label=\"toggle password visibility\"\r\n                        edge=\"end\"\r\n                      ></IconButton>\r\n                    </InputAdornment>\r\n                  }\r\n                  labelWidth={80}\r\n                />\r\n              </FormControl>\r\n\r\n              <FormHelperText error={true}>\r\n                {errors.lastName?.message}\r\n              </FormHelperText>\r\n\r\n        \r\n\r\n              <FormControl\r\n                variant=\"outlined\"\r\n                className={clsx(classes.margin, classes.textField)}\r\n              >\r\n                {\" \"}\r\n                <InputLabel>Email</InputLabel>\r\n                <OutlinedInput\r\n                  id=\"outlined-adornment-password\"\r\n                  type=\"email\"\r\n                  {...register(\"email\", {\r\n                    minLength: {\r\n                      value: 5,\r\n                      message: \"you must insert email\",\r\n                    },\r\n                  })}\r\n                  endAdornment={\r\n                    <InputAdornment position=\"end\">\r\n                      <IconButton\r\n                        aria-label=\"toggle password visibility\"\r\n                        edge=\"end\"\r\n                      ></IconButton>\r\n                    </InputAdornment>\r\n                  }\r\n                  labelWidth={45}\r\n                />\r\n              </FormControl>\r\n\r\n            \r\n              <FormHelperText error={true}>\r\n                {errors.email?.message}\r\n              </FormHelperText>\r\n\r\n              \r\n              <FormControl\r\n                className={clsx(classes.margin, classes.textField)}\r\n                variant=\"outlined\"\r\n              >\r\n                <InputLabel htmlFor=\"outlined-adornment-password\">\r\n                  Password\r\n                </InputLabel>\r\n                <OutlinedInput\r\n                  id=\"outlined-adornment-password\"\r\n                  type={values.showPassword ? \"text\" : \"password\"}\r\n                  onChange={handleChange(\"password\")}\r\n                  {...register(\"password\", {\r\n                    minLength: {\r\n                      value: 5,\r\n                      message: \"your password can not be less than 5 chars\",\r\n                    },\r\n                  })}\r\n                  endAdornment={\r\n                    <InputAdornment position=\"end\">\r\n                      <IconButton\r\n                        aria-label=\"toggle password visibility\"\r\n                        onClick={handleClickShowPassword}\r\n                        onMouseDown={handleMouseDownPassword}\r\n                        edge=\"end\"\r\n                      >\r\n                        {values.showPassword ? (\r\n                          <Visibility />\r\n                        ) : (\r\n                          <VisibilityOff />\r\n                        )}\r\n                      </IconButton>\r\n                    </InputAdornment>\r\n                  }\r\n                  labelWidth={70}\r\n                />\r\n              </FormControl>\r\n\r\n              <FormHelperText error={true}>\r\n                {errors.password?.message}\r\n              </FormHelperText>\r\n              \r\n          \r\n\r\n            <br />\r\n            <Button type=\"submit\" variant=\"contained\" color=\"primary\" className={classes.btn}>\r\n              Add\r\n            </Button>\r\n\r\n            <Button onClick={()=>history.goBack()}variant=\"contained\" color=\"secondary\" className={classes.btn}>back</Button>\r\n\r\n          </form>\r\n        </CardContent>\r\n        \r\n      </Card>\r\n\r\n    </div>\r\n    </Box>\r\n \r\n  );\r\n}\r\n\r\nexport default AddEmployee;\r\n","import { Paper } from \"@material-ui/core\";\nimport AddEmployee from \"../../EmployeeArea/AddCustomer/AddCustomer\";\nimport \"./Papering.css\";\n\nimport React from 'react';\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\n\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      '& > *': {\n        margin: theme.spacing(10),\n        width: theme.spacing(14),\n        height: theme.spacing(14),\n        marginLeft: theme.spacing(60)\n      },\n    },\n  }),\n);\n\nfunction Papering(): JSX.Element {\n\n    const classes = useStyles();\n    return (\n        <div className={classes.root}>\n\t\t\t<Paper  >\n             \n<AddEmployee/>\n\n            </Paper>\n        </div>\n    );\n}\n\nexport default Papering;\n","import { Button } from \"@material-ui/core\";\nimport { useHistory } from \"react-router-dom\";\nimport \"./Information.css\";\n\nfunction Information(): JSX.Element {\n\nconst history = useHistory();\n\n    return (\n        <div className=\"Information\">\n\t\t\t<span>\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque suscipit blandit purus id consectetur. Proin lorem risus, tempor ut ornare in, porttitor a nisi. Donec vitae mauris in quam vehicula euismod tempus id risus. Suspendisse sodales lacus a quam vestibulum, eu pretium sapien accumsan. Maecenas sed gravida urna. Nullam aliquam condimentum metus, nec ultricies eros laoreet vel. Ut feugiat eu augue ut commodo. In hac habitasse platea dictumst. Phasellus tempor velit eget felis gravida, quis placerat mi rhoncus. Quisque consectetur vitae purus vitae aliquam. Praesent a magna a est pharetra tristique eget ut justo. Pellentesque ultrices urna sed massa rhoncus, ac feugiat ex hendrerit. Mauris tincidunt orci nec dolor bibendum bibendum.\n\nIn at vestibulum ante. Cras nisl justo, tempus id felis eu, laoreet vulputate nibh. Duis lacinia, sem rhoncus viverra pretium, risus est fringilla ex, nec tincidunt magna ipsum sit amet ante. Nullam finibus leo dolor, vel facilisis velit pharetra ut. Nunc et tellus in nibh fermentum mollis. Duis facilisis vestibulum dolor at ornare. Donec id eros tristique, laoreet elit ac, pretium ligula. Etiam viverra fermentum turpis, eu feugiat felis pretium eu. Curabitur porttitor orci ac eros suscipit, vel tempor nulla varius. Curabitur at fermentum urna. Aliquam rutrum, justo id gravida tincidunt, mauris tortor cursus erat, id mollis dui enim eget purus.\n\nMaecenas dignissim turpis eros. Suspendisse maximus augue nec condimentum laoreet. Donec vulputate tortor iaculis venenatis sodales. Etiam vel velit tristique, scelerisque libero non, sagittis ligula. In ut mattis quam. Maecenas volutpat mi nec lectus volutpat sollicitudin. In a ex dui. Nulla erat quam, finibus sed purus id, egestas dapibus tortor. Vivamus scelerisque neque sagittis velit fermentum blandit. Nunc eget facilisis justo. Curabitur odio elit, volutpat interdum fermentum non, gravida ut enim. Aliquam faucibus sit amet neque vitae ornare. Cras tempor neque enim, eget efficitur est eleifend non. Sed maximus vehicula imperdiet. Curabitur nec felis hendrerit, semper leo eget, vulputate enim.\n\nPraesent ut ligula sit amet ante accumsan gravida in et dui. Proin quis mi ante. Aenean nec mi et risus aliquet semper eget vitae ante. Proin sed leo sit amet ante tempor porta eget eu quam. Sed sagittis orci dolor, ut tincidunt metus interdum sed. Quisque vel urna congue, tristique velit ac, venenatis libero. Nullam tristique elementum tortor, sit amet ultricies purus bibendum eu. Morbi finibus iaculis sagittis. Aenean cursus dictum faucibus. Nulla vitae odio nunc. Phasellus at tortor mauris. Vivamus in iaculis purus, nec rutrum sapien. Cras commodo dui lacus, eget semper ante consequat eleifend. Nunc vitae egestas dui. Nullam placerat ullamcorper vehicula. In vehicula mattis ultrices.\n\nAliquam ut semper dolor. Cras a purus ex. Nullam quis eros tristique nunc faucibus malesuada. In hac habitasse platea dictumst. Mauris diam dolor, volutpat non nisl in, ultrices iaculis eros. Sed malesuada sem at massa pellentesque, hendrerit volutpat lacus varius. Mauris ultricies justo in turpis placerat, in hendrerit est facilisis. Curabitur condimentum sit amet nulla eget lacinia. Donec id mauris vitae nibh pretium commodo at id ligula. Nulla viverra, elit sed vehicula cursus, eros tortor tristique turpis, quis rutrum quam dolor nec nisl. Ut volutpat velit odio, sit amet feugiat ante malesuada eu.\n            </span>\n<br/>\n<br/>\n            <Button onClick={()=> history.push(\"/home\")} variant=\"contained\" color=\"secondary\"> back </Button>\n        </div>\n    );\n}\n\nexport default Information;\n","import {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  FormControl,\r\n  FormHelperText,\r\n  IconButton,\r\n  InputAdornment,\r\n  InputLabel,\r\n  makeStyles,\r\n  OutlinedInput,\r\n  TextField,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport clsx from \"clsx\";\r\n\r\nimport { useForm } from \"react-hook-form\";\r\nimport { RouteComponentProps, useHistory } from \"react-router-dom\";\r\nimport notify from \"../../../Services/Notifilcation\";\r\nimport { EmployeesUpdatedAction } from \"../../Redux/EmployeesSatate\";\r\nimport { useState } from \"react\";\r\nimport UserModel from \"../../../UserModel/UserModel\";\r\nimport store from \"../../Redux/Store\";\r\nimport Globals from \"../../../Services/Globals\";\r\nimport tokenAxios from \"../../../Services/interceptor\";\r\nimport { Visibility, VisibilityOff } from \"@material-ui/icons\";\r\nimport React from \"react\";\r\n\r\ninterface RouteParam {\r\n  id: string;\r\n}\r\n\r\ninterface EditDetailsProps extends RouteComponentProps<RouteParam> {}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    minWidth: 275,\r\n  },\r\n  box: {\r\n    marginLeft: \"39%\",\r\n    maxWidth: \"50px\",\r\n    marginTop: \"0px\",\r\n  },\r\n  pos: {\r\n    marginBottom: 0,\r\n    marginLeft: \"27%\",\r\n  },\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n    marginLeft: \"20px\",\r\n  },\r\n  withoutLabel: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  textField: {\r\n    width: \"25ch\",\r\n  },\r\n  btn: {\r\n    marginLeft: theme.spacing(4),\r\n  },\r\n}));\r\n\r\nfunction EditEmployee(props: EditDetailsProps): JSX.Element {\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm<UserModel>({});\r\n  const history = useHistory();\r\n  const currentId = +props.match.params?.id;\r\n  const classes = useStyles();\r\n\r\n  const [employee, setEmployee] = useState(\r\n    store\r\n      .getState()\r\n      .employeeState.employees.find((c) => c.id === +props.match.params?.id)\r\n  );\r\n\r\n  const [client, setClient] = useState(store.getState().authState.client);\r\n\r\n  const [customer, setCustomer] = useState();\r\n\r\n  const [values, setValues] = React.useState({\r\n    showPassword: false,\r\n  });\r\n\r\n  const handleChange = (prop) => (event) => {\r\n    setValues({ ...values, [prop]: event.target.value });\r\n  };\r\n\r\n  const handleClickShowPassword = () => {\r\n    setValues({ ...values, showPassword: !values.showPassword });\r\n  };\r\n\r\n  const handleMouseDownPassword = (event) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  console.log(employee);\r\n\r\n  async function send(user: UserModel) {\r\n    console.log(employee);\r\n    user.id = currentId;\r\n    const customer = {\r\n      id: user?.id,\r\n      firstName: user?.firstName,\r\n      lastName: user?.lastName,\r\n      email: user?.email,\r\n      password: user?.password,\r\n      clientType: \"CUSTOMER\",\r\n    };\r\n    console.log(customer);\r\n\r\n    // updating DB\r\n    const response = await tokenAxios.put<UserModel>(\r\n      Globals.urls.admin + \"customers\",\r\n      customer\r\n    );\r\n\r\n    //update global app state\r\n    store.dispatch(EmployeesUpdatedAction(response.data));\r\n\r\n    //update local\r\n    setEmployee(\r\n      store\r\n        .getState()\r\n        .employeeState.employees.find((c) => c.id === +props.match.params?.id)\r\n    );\r\n\r\n    notify.success(\"Customer updated!\");\r\n\r\n    history.push(\"/customers\");\r\n  }\r\n\r\n  return (\r\n    <Box className={classes.box}>\r\n      <Card className={classes.root}>\r\n        <CardContent>\r\n          <Typography className={classes.pos}>Edit Customer</Typography>\r\n          <br />\r\n          <form onSubmit={handleSubmit(send)}>\r\n            {/* <TextField\r\n                id=\"outlined-basic\"\r\n                label=\"first name\"\r\n                variant=\"outlined\"\r\n                type=\"text\"\r\n                defaultValue={employee.firstName}\r\n                name=\"firstName\"\r\n                {...register(\"firstName\" , {\r\n                  required: {\r\n                    value: true,\r\n                    message: \"your name is required\",\r\n                  },\r\n                  maxLength: {\r\n                    value: 30,\r\n                    message: \"your name can not be greater than 30\",\r\n                  },\r\n                  minLength: {\r\n                    value: 2,\r\n                    message: \"your name can not be less than 2 chars\",\r\n                  },\r\n                })}\r\n              />\r\n  \r\n              <br />\r\n              <FormHelperText error={true}>{errors.firstName?.message}</FormHelperText>\r\n              <br />\r\n\r\n              <TextField\r\n                id=\"outlined-basic\"\r\n                label=\"last name\"\r\n                variant=\"outlined\"\r\n                defaultValue={employee.lastName}\r\n                type=\"text\"\r\n                name=\"lastName\"\r\n                {...register(\"lastName\" , {\r\n                  required: {\r\n                    value: true,\r\n                    message: \"your name is required\",\r\n                  },\r\n                  maxLength: {\r\n                    value: 30,\r\n                    message: \"your name can not be greater than 30\",\r\n                  },\r\n                  minLength: {\r\n                    value: 2,\r\n                    message: \"your name can not be less than 2 chars\",\r\n                  },\r\n                })}\r\n              />\r\n  \r\n              <br />\r\n              <FormHelperText error={true}>{errors.lastName?.message}</FormHelperText>\r\n              <br />\r\n  \r\n  \r\n              <TextField\r\n                id=\"outlined-basic\"\r\n                label=\"email\"\r\n                variant=\"outlined\"\r\n                defaultValue={employee.email}\r\n                type=\"email\"\r\n                {...register(\"email\", {\r\n                  required: {\r\n                    value: true,\r\n                    message: \"your email is required\",\r\n                  },\r\n                  // pattern: {\r\n                  //   value: /^\\S+@\\S+$/i,\r\n                  //   message: \"your email required\",\r\n                  // },\r\n                })}\r\n              />\r\n              <br />\r\n              <FormHelperText error={true}>{errors.email?.message}</FormHelperText>\r\n              <br />\r\n              <TextField\r\n                id=\"outlined-basic\"\r\n                label=\"password\"\r\n                variant=\"outlined\"\r\n                 defaultValue={employee.password}\r\n                type=\"password\"\r\n                {...register(\"password\", {\r\n                  minLength: {\r\n                    value: 5,\r\n                    message: \"your password can not be less than 5 chars\",\r\n                  },\r\n                })}\r\n              />\r\n              <br />\r\n              <FormHelperText error={true}>{errors.password?.message}</FormHelperText>\r\n   */}\r\n\r\n            <FormControl\r\n              variant=\"outlined\"\r\n              className={clsx(classes.margin, classes.textField)}\r\n            >\r\n              <InputLabel>First name</InputLabel>\r\n              <OutlinedInput\r\n                defaultValue={employee.firstName}\r\n                id=\"outlined-adornment-password\"\r\n                type=\"text\"\r\n                {...register(\"firstName\", {\r\n                  required: {\r\n                    value: true,\r\n                    message: \"your name is required\",\r\n                  },\r\n                  maxLength: {\r\n                    value: 30,\r\n                    message: \"your name can not be greater than 30\",\r\n                  },\r\n                  minLength: {\r\n                    value: 2,\r\n                    message: \"your name can not be less than 2 chars\",\r\n                  },\r\n                })}\r\n                endAdornment={\r\n                  <InputAdornment position=\"end\">\r\n                    <IconButton\r\n                      aria-label=\"toggle password visibility\"\r\n                      edge=\"end\"\r\n                    ></IconButton>\r\n                  </InputAdornment>\r\n                }\r\n                labelWidth={76}\r\n              />\r\n            </FormControl>\r\n\r\n            <FormHelperText error={true}>\r\n              {errors.firstName?.message}\r\n            </FormHelperText>\r\n\r\n            <br />\r\n            <FormControl\r\n              variant=\"outlined\"\r\n              className={clsx(classes.margin, classes.textField)}\r\n            >\r\n              <InputLabel>last name</InputLabel>\r\n              <OutlinedInput\r\n                defaultValue={employee.lastName}\r\n                id=\"outlined-adornment-password\"\r\n                type=\"text\"\r\n                {...register(\"lastName\", {\r\n                  required: {\r\n                    value: true,\r\n                    message: \"your name is required\",\r\n                  },\r\n                  maxLength: {\r\n                    value: 30,\r\n                    message: \"your name can not be greater than 30\",\r\n                  },\r\n                  minLength: {\r\n                    value: 2,\r\n                    message: \"your name can not be less than 2 chars\",\r\n                  },\r\n                })}\r\n                endAdornment={\r\n                  <InputAdornment position=\"end\">\r\n                    <IconButton\r\n                      aria-label=\"toggle password visibility\"\r\n                      edge=\"end\"\r\n                    ></IconButton>\r\n                  </InputAdornment>\r\n                }\r\n                labelWidth={76}\r\n              />\r\n            </FormControl>\r\n\r\n            <FormHelperText error={true}>\r\n              {errors.lastName?.message}\r\n            </FormHelperText>\r\n\r\n            <br />\r\n\r\n            <FormControl\r\n              variant=\"outlined\"\r\n              className={clsx(classes.margin, classes.textField)}\r\n            >\r\n              {\" \"}\r\n              <InputLabel>Email</InputLabel>\r\n              <OutlinedInput\r\n                defaultValue={employee.email}\r\n                id=\"outlined-adornment-password\"\r\n                type=\"email\"\r\n                {...register(\"email\", {\r\n                  minLength: {\r\n                    value: 5,\r\n                    message: \"you must insert email\",\r\n                  },\r\n                })}\r\n                endAdornment={\r\n                  <InputAdornment position=\"end\">\r\n                    <IconButton\r\n                      aria-label=\"toggle password visibility\"\r\n                      edge=\"end\"\r\n                    ></IconButton>\r\n                  </InputAdornment>\r\n                }\r\n                labelWidth={45}\r\n              />\r\n            </FormControl>\r\n\r\n            <FormHelperText error={true}>\r\n              {errors.email?.message}\r\n            </FormHelperText>\r\n\r\n            <br />\r\n\r\n            <FormControl\r\n              className={clsx(classes.margin, classes.textField)}\r\n              variant=\"outlined\"\r\n            >\r\n              <InputLabel htmlFor=\"outlined-adornment-password\">\r\n                Password\r\n              </InputLabel>\r\n              <OutlinedInput\r\n                defaultValue={employee.password}\r\n                id=\"outlined-adornment-password\"\r\n                type={values.showPassword ? \"text\" : \"password\"}\r\n                onChange={handleChange(\"password\")}\r\n                {...register(\"password\", {\r\n                  minLength: {\r\n                    value: 5,\r\n                    message: \"your password can not be less than 5 chars\",\r\n                  },\r\n                })}\r\n                endAdornment={\r\n                  <InputAdornment position=\"end\">\r\n                    <IconButton\r\n                      aria-label=\"toggle password visibility\"\r\n                      onClick={handleClickShowPassword}\r\n                      onMouseDown={handleMouseDownPassword}\r\n                      edge=\"end\"\r\n                    >\r\n                      {values.showPassword ? <Visibility /> : <VisibilityOff />}\r\n                    </IconButton>\r\n                  </InputAdornment>\r\n                }\r\n                labelWidth={70}\r\n              />\r\n            </FormControl>\r\n\r\n            <FormHelperText error={true}>\r\n              {errors.password?.message}\r\n            </FormHelperText>\r\n\r\n            <br />\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.btn}\r\n            >\r\n              Edit\r\n            </Button>\r\n\r\n            <Button\r\n              onClick={() => history.push(\"/customers\")}\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              className={classes.btn}\r\n            >\r\n              back\r\n            </Button>\r\n\r\n            <br />\r\n            <br />\r\n          </form>\r\n        </CardContent>\r\n      </Card>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default EditEmployee;\r\n","import \"./AllCompanies.css\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport {\n  Button,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n} from \"@material-ui/core\";\nimport CreateIcon from \"@material-ui/icons/Create\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nimport notify from \"../../../Services/Notifilcation\";\nimport { useHistory } from \"react-router-dom\";\nimport store from \"../../Redux/Store\";\nimport tokenAxios from \"../../../Services/interceptor\";\nimport CompanyModel from \"../../../UserModel/CompanyModel\";\nimport globals from \"../../../Services/Globals\";\n\nfunction AllCompanies(): JSX.Element {\n    const [gets, setGet] = useState<CompanyModel[]>([]);\n    const history = useHistory();\n  \n    useEffect(() => {\n        if (!store.getState().authState.client) {\n          notify.error(\"please login\");\n          history.push(\"/login\");\n        }\n        const axiosGet = async () => {\n          // \"http://localhost:8080/admin/companies\"\n          const response = await tokenAxios.get<CompanyModel[]>(\n           globals.urls.admin+\"companies\"\n          );\n          setGet(response.data);\n        };\n        axiosGet();\n      }, [gets]);\n    \n      function deletePost(id) {\n        // \"http://localhost:8080/admin/companies/\"\n        tokenAxios\n          .delete<any>(globals.urls.admin+\"companies/\" + id)\n          .then(() => {\n            notify.success(\"Company deleted!\");\n            setGet([]);\n          });\n      }\n    \n      function updatePost(id) {\n        console.log(id);\n        history.push(\"/editcomp/\" + id);\n    \n      }\n    \n      const res = gets.map((get) => {\n        return (\n          <TableBody key={get.id}>\n            <TableRow>\n              <TableCell>{get.id} </TableCell>\n              <TableCell align=\"right\">{get.firstName}</TableCell>\n              <TableCell align=\"right\">{get.email}</TableCell>\n              <TableCell align=\"right\">{get.password}</TableCell>\n              <TableCell align=\"right\">{get.clientType}</TableCell>\n              {/* <TableCell align=\"right\">{get.coupons}</TableCell> */}\n              <TableCell align=\"right\">\n                <Button>\n                  <CreateIcon onClick={() => updatePost(get.id)} />\n                </Button>\n                <Button>\n                  <DeleteIcon onClick={() => deletePost(get.id)} />\n                </Button>\n              </TableCell>\n            </TableRow>\n          </TableBody>\n        );\n      });\n    \n      return (\n        <div className=\"Layout\">\n          <Table className=\"Table\" aria-label=\"simple table\">\n            <TableHead>\n              <TableRow>\n                <TableCell>Id</TableCell>\n                <TableCell align=\"right\">name</TableCell>\n                <TableCell align=\"right\"> Email&nbsp;</TableCell>\n                <TableCell align=\"right\">Password&nbsp;</TableCell>\n                <TableCell align=\"right\">ClientType&nbsp;</TableCell>\n                {/* <TableCell align=\"right\">Coupons&nbsp;</TableCell> */}\n                <TableCell align=\"right\">Action&nbsp;</TableCell>\n              </TableRow>\n            </TableHead>\n    \n            {gets && res}\n          </Table>\n        </div>\n      );\n    }\n\n\nexport default AllCompanies;\n","import {\r\n  Button,\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  CardMedia,\r\n  Collapse,\r\n  Grid,\r\n  IconButton,\r\n  makeStyles,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  Tooltip,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport tokenAxios from \"../../../Services/interceptor\";\r\nimport notify from \"../../../Services/Notifilcation\";\r\nimport clsx from \"clsx\";\r\nimport store from \"../../Redux/Store\";\r\nimport \"./CompanyPlace.css\";\r\nimport CreateIcon from \"@material-ui/icons/Create\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport Coupon from \"../../../UserModel/Coupon\";\r\nimport CouponGet from \"../../../UserModel/CouponGet\";\r\nimport ContactSupportIcon from \"@material-ui/icons/ContactSupport\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport { CouponGetDownloadedAction } from \"../../Redux/CouponGetState\";\r\nimport FormatListNumberedRtlIcon from \"@material-ui/icons/FormatListNumberedRtl\";\r\nimport globals from \"../../../Services/Globals\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    marginLeft: theme.spacing(11),\r\n  },\r\n  root: {\r\n    maxWidth: \"200px\",\r\n    margin: theme.spacing(4),\r\n    opacity: 1,\r\n    \"&:hover\": {\r\n      opacity: \"0.5\",\r\n      transition: \"1s\",\r\n    },\r\n  },\r\n  paper: {\r\n    margin: theme.spacing(2),\r\n  },\r\n  expand: {\r\n    transform: \"rotate(0deg)\",\r\n    marginLeft: \"auto\",\r\n    transition: theme.transitions.create(\"transform\", {\r\n      duration: theme.transitions.duration.shortest,\r\n    }),\r\n  },\r\n  media: {\r\n    height: \"200px\",\r\n    width: \"200px\",\r\n  },\r\n  tooltip: {\r\n    opacity: \"1\",\r\n    //   margin: theme.spacing(2),\r\n    \"&:hover\": {\r\n      opacity: \"1\",\r\n    },\r\n  },\r\n  expandOpen: {\r\n    transform: \"rotate(180deg)\",\r\n  },\r\n}));\r\n\r\nfunction CompanyPlace(): JSX.Element {\r\n  const [gets, setGet] = useState<CouponGet[]>([]);\r\n  const history = useHistory();\r\n  const company = useState(store.getState().authState.client);\r\n  const token = useState(store.getState().authState.client.token);\r\n  const classes = useStyles();\r\n  const [expanded, setExpanded] = useState(false);\r\n  const [couponsUpdate, setCouponsUpdate] = useState<CouponGet[]>([]);\r\n\r\n  const handleExpandClick = () => {\r\n    setExpanded(!expanded);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!store.getState().authState.client) {\r\n      notify.error(\"please login\");\r\n      history.push(\"/login\");\r\n    }\r\n\r\n    const axiosGet = async () => {\r\n      // \"http://localhost:8080/company/coupons\",\r\n\r\n      const response = await tokenAxios.get<CouponGet[]>(\r\n        globals.urls.company+\"coupons\",\r\n        {\r\n          params: {\r\n            companyId: company[0].id,\r\n          },\r\n        }\r\n      );\r\n      setGet(response.data);\r\n      setCouponsUpdate(response.data);\r\n      store.dispatch(CouponGetDownloadedAction(response.data));\r\n      console.log(\"image id \" + couponsUpdate[1]?.imageID);\r\n    };\r\n    axiosGet();\r\n  }, [gets]);\r\n\r\n  async function deleteCoupon(id) {\r\n    console.log(\"id to delete: \" + id);\r\n    // \"http://localhost:8080/company/coupons/\"\r\n    const deleteCoupon = await tokenAxios.delete<any>(\r\n    globals.urls.company+\"coupons/\"+ id\r\n    );\r\n  }\r\n\r\n  async function updateCoupon(id) {\r\n    history.push(\"/coupon/\" + id);\r\n  }\r\n\r\n  // const result = gets.map((get) => {\r\n  //   return (\r\n\r\n  //    <TableBody key={get.id} >\r\n  //       <TableRow>\r\n  //         <TableCell>{get.id}</TableCell>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n  //         <TableCell align=\"right\">{get.companyID}</TableCell>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n  //         <TableCell align=\"right\">{get.category}</TableCell>&nbsp;\r\n  //         <TableCell align=\"right\">{get.title}</TableCell>\r\n  //         <TableCell align=\"right\">{get.description}</TableCell>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n  //         <TableCell align=\"right\">{get.startDate}</TableCell>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n  //         <TableCell align=\"right\">{get.endDate}</TableCell>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n  //         <TableCell align=\"right\">{get.amount}</TableCell>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n  //         <TableCell align=\"right\">{get.price}</TableCell>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n  //         <TableCell align=\"right\">{get.imageID}</TableCell>\r\n\r\n  //       </TableRow>\r\n  //     </TableBody>\r\n  //   );\r\n  // });\r\n\r\n  const result = gets.map((coupon) => {\r\n    return (\r\n      <div>\r\n        <Grid spacing={5}>\r\n          <Card className={classes.root}>\r\n            <CardContent>\r\n              <Typography>{coupon?.description}</Typography>\r\n            </CardContent>\r\n            <CardMedia\r\n              className={classes.media}\r\n              // \"http://localhost:8080/client/coupons/images/\" + coupon?.imageID\r\n\r\n              image={\r\n                 globals.urls.images+ coupon?.imageID }\r\n            />\r\n\r\n            <CardActions>\r\n              <Tooltip\r\n                title={\"delete coupon\"}\r\n                arrow\r\n                className={classes.tooltip}\r\n              >\r\n                <IconButton>\r\n                  <DeleteIcon onClick={() => deleteCoupon(coupon.id)} />\r\n                </IconButton>\r\n              </Tooltip>\r\n\r\n              <Tooltip\r\n                title={\"update coupon\"}\r\n                arrow\r\n                className={classes.tooltip}\r\n              >\r\n                <IconButton>\r\n                  <CreateIcon onClick={() => updateCoupon(coupon.id)} />\r\n                </IconButton>\r\n              </Tooltip>\r\n\r\n              <Tooltip\r\n                title={\"the amount is: \" + coupon?.amount}\r\n                arrow\r\n                className={classes.tooltip}\r\n              >\r\n                <IconButton>\r\n                  <FormatListNumberedRtlIcon />\r\n                </IconButton>\r\n              </Tooltip>\r\n            </CardActions>\r\n          </Card>\r\n\r\n          <br />\r\n          <br />\r\n        </Grid>\r\n      </div>\r\n    );\r\n  });\r\n\r\n  // return (\r\n  // <>\r\n  // <Table className=\"Table\" aria-label=\"simple table\">\r\n  //         <TableHead>\r\n  //           <TableRow>\r\n  //             <TableCell>Id</TableCell>\r\n  //             <TableCell align=\"right\">company id</TableCell>\r\n  //             <TableCell align=\"right\"> category&nbsp;</TableCell>\r\n  //             <TableCell align=\"right\">title&nbsp;</TableCell>\r\n  //             <TableCell align=\"right\">description&nbsp;</TableCell>\r\n  //             <TableCell align=\"right\">startDate&nbsp;</TableCell>\r\n  //             <TableCell align=\"right\">endDate&nbsp;</TableCell>\r\n  //             <TableCell align=\"right\">amount&nbsp;</TableCell>\r\n  //             <TableCell align=\"right\">price&nbsp;</TableCell>\r\n  //             <TableCell align=\"right\">image&nbsp;</TableCell>\r\n  //           </TableRow>\r\n  //         </TableHead>\r\n  //         </Table>\r\n\r\n  //         {gets && result}\r\n\r\n  // </>\r\n  // );\r\n\r\n  return (\r\n    <>\r\n      <Grid container className={classes.card}>\r\n        {gets && result}\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CompanyPlace;\r\n","import { Table, TableBody, TableCell, TableHead, TableRow ,IconButton, Card, CardActions, CardContent, CardMedia, Collapse, Grid, Tooltip, Typography, makeStyles, Button } from \"@material-ui/core\";\r\nimport {  useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport tokenAxios from \"../../../Services/interceptor\";\r\nimport notify from \"../../../Services/Notifilcation\";\r\nimport Coupon from \"../../../UserModel/Coupon\";\r\nimport store from \"../../Redux/Store\";\r\nimport \"./CustomerCoupons.css\";\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { CouponDownloadedAction } from \"../../Redux/CouponsState\";\r\nimport axios from \"axios\";\r\nimport CouponGet from \"../../../UserModel/CouponGet\";\r\nimport ContactSupportIcon from '@material-ui/icons/ContactSupport';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport clsx from 'clsx';\r\nimport CreditCardIcon from '@material-ui/icons/CreditCard';\r\nimport globals from \"../../../Services/Globals\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card:{\r\n   marginLeft: theme.spacing(11),\r\n  },\r\n   root: {\r\n     maxWidth: \"200px\",\r\n       margin: theme.spacing(4),\r\n     opacity: 1,\r\n     \"&:hover\":{\r\n         opacity: \"0.5\",\r\n         transition: \"1s\",\r\n         \r\n         }\r\n \r\n   },\r\n   paper:{\r\n       margin: theme.spacing(2),\r\n \r\n   },\r\n   expand: {\r\n    transform: 'rotate(0deg)',\r\n    marginLeft: 'auto',\r\n    transition: theme.transitions.create('transform', {\r\n      duration: theme.transitions.duration.shortest,\r\n    }),\r\n  },\r\n   media: {\r\n     height: \"200px\",\r\n     width: \"200px\",\r\n   },\r\n   tooltip:{\r\n     opacity: \"1\",\r\n   //   margin: theme.spacing(2),\r\n     \"&:hover\":{\r\n       opacity: \"1\",\r\n   }\r\n },\r\n expandOpen: {\r\n  transform: 'rotate(180deg)',\r\n},\r\npayment:{\r\n  marginLeft: theme.spacing(70),\r\n  \r\n},\r\n }));\r\n\r\nfunction CustomerCoupons(): JSX.Element {\r\n\r\n    const [gets, setGets] = useState<CouponGet[]>([]);\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  const [expanded, setExpanded] = useState(false);\r\n\r\n  const handleExpandClick = () => {\r\n    setExpanded(!expanded);\r\n  };\r\n  \r\n\r\n    const customer = useState(store.getState().authState.client);\r\n\r\n    \r\n    // useEffect(() => {\r\n    //     if (!store.getState().authState.client) {\r\n    //       notify.error(\"please login\");\r\n    //       history.push(\"/login\");\r\n    //     }\r\n\r\n    // const axiosGet = async () => {\r\n                 \r\n    //     const response = await tokenAxios.get<Coupon[]>(\r\n    //       \"http://localhost:8080/customer/coupons\",\r\n    //        {\r\n    //         params: {\r\n    //             customerId: customer[0].id,\r\n    //         }\r\n    //        } );\r\n    //     setGet(response.data);\r\n    //     store.dispatch(CouponDownloadedAction(response.data));\r\n    //   };\r\n    //   axiosGet();\r\n    // },[]);\r\n\r\n\r\n    useEffect(() => {\r\n         \r\n      if (!store.getState().authState.client) {\r\n          notify.error(\"please login\");\r\n          history.push(\"/login\");\r\n        }\r\n\r\n      const axiosGet = async () => {\r\n        // \"http://localhost:8080/customer/coupons\",\r\n        const response = await tokenAxios.get<CouponGet[]>(\r\n       globals.urls.customers+\"coupons\",\r\n          {\r\n            params: {\r\n                customerId: customer[0].id,\r\n            }\r\n           } );\r\n       \r\n        //const allCoupons = response.data;\r\n       \r\n       // store.dispatch(CouponDownloadedAction(allCoupons));\r\n       \r\n        setGets(response.data);\r\n        \r\n        console.log(response.data);\r\n      };\r\n      axiosGet();\r\n    \r\n  }, []);\r\n\r\n    // const result = gets.map((get) => {\r\n    //     return (\r\n       \r\n    //         <TableRow key={get.id}>\r\n    //           <TableCell>{get.id} </TableCell>\r\n    //           <TableCell align=\"right\">{get.category}</TableCell>\r\n    //           <TableCell align=\"right\">{get.title}</TableCell>\r\n    //           <TableCell align=\"right\">{get.description}</TableCell>\r\n    //           <TableCell align=\"right\">{get.startDate}</TableCell>\r\n    //           <TableCell align=\"right\">{get.endDate}</TableCell>\r\n    //           <TableCell align=\"right\">{get.amount}</TableCell>\r\n    //           <TableCell align=\"right\">{get.price}</TableCell>\r\n    //           <TableCell align=\"right\">{get.image}</TableCell>\r\n          \r\n    //         </TableRow>\r\n      \r\n    //     );\r\n    //   });\r\n\r\n\r\n\r\n\r\n\r\n        {/* <Table className=\"Table\" aria-label=\"simple table\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell>Id</TableCell>\r\n                    <TableCell align=\"right\"> category&nbsp;</TableCell>\r\n                    <TableCell align=\"right\">title&nbsp;</TableCell>\r\n                    <TableCell align=\"right\">description&nbsp;</TableCell>\r\n                    <TableCell align=\"right\">startDate&nbsp;</TableCell>\r\n                    <TableCell align=\"right\">endDate&nbsp;</TableCell>\r\n                    <TableCell align=\"right\">amount&nbsp;</TableCell>\r\n                    <TableCell align=\"right\">price&nbsp;</TableCell>\r\n                    <TableCell align=\"right\">image&nbsp;</TableCell>\r\n                 \r\n                     \r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                {gets && result}\r\n                </TableBody>\r\n                </Table>\r\n    \r\n              */}\r\n     const result = gets.map((coupon) => {\r\n    \r\n      return (\r\n      <div>\r\n      <Grid spacing={5} >\r\n        <Card className={classes.root} >\r\n          \r\n              <CardContent>\r\n                <Typography>{coupon?.id}</Typography>\r\n                <Typography>{coupon?.title}</Typography>\r\n              </CardContent>\r\n              <CardMedia\r\n                className={classes.media}\r\n                // image={\"http://localhost:8080/client/coupons/images/\" + coupon?.imageID}\r\n              image={globals.urls.images+ coupon?.imageID}\r\n              />\r\n        \r\n              <CardActions>\r\n              <IconButton aria-label=\"add to favorites\"\r\n           \r\n              >\r\n            \r\n              <DeleteIcon />\r\n            \r\n            </IconButton>\r\n    \r\n            {/* <IconButton>\r\n              <ShoppingCartIcon onClick={() => buyCoupon(coupon?.id)} />\r\n            </IconButton> */}\r\n            <Tooltip title={coupon?.description} arrow className={classes.tooltip}>\r\n        \r\n          <IconButton>       \r\n               \r\n               <ContactSupportIcon />\r\n   \r\n    </IconButton>\r\n        </Tooltip>\r\n           \r\n              </CardActions>\r\n           \r\n              <CardActions disableSpacing>\r\n              <IconButton aria-label=\"add to favorites\"\r\n              onClick={()=>console.log(coupon.id)}\r\n              >\r\n              <ContactSupportIcon />\r\n          \r\n            </IconButton>\r\n        \r\n            <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n            \r\n            <CardContent>\r\n         \r\n            <Typography paragraph>Method:</Typography>\r\n\r\n            </CardContent>\r\n         \r\n            </Collapse>\r\n      \r\n            <IconButton\r\n         \r\n         className={clsx(classes.expand, {\r\n          \r\n            [classes.expandOpen]: expanded,\r\n          \r\n          })}\r\n          onClick={handleExpandClick}\r\n          aria-expanded={expanded}\r\n          aria-label=\"show more\"\r\n        >\r\n          <ExpandMoreIcon />\r\n        </IconButton>\r\n             \r\n              </CardActions>\r\n         \r\n         \r\n            </Card>\r\n           \r\n            <br/>\r\n            <br/>\r\n          </Grid>\r\n\r\n          </div>\r\n    \r\n    );\r\n \r\n  });\r\n\r\n\r\n          return (\r\n        <>\r\n         \r\n            <Grid container className={classes.card} >\r\n\r\n      {gets && result}\r\n\r\n</Grid>\r\n\r\n\r\n<Button variant=\"contained\" className={classes.payment} color=\"primary\"  endIcon={<CreditCardIcon />}  onClick={() =>history.push(\"/payment/paypal\")}>\r\npay\r\n \r\n  \r\n</Button>\r\n  \r\n        </>\r\n    );\r\n}\r\n\r\nexport default CustomerCoupons;\r\n","import { Table, TableHead, TableRow, TableCell, TableBody } from \"@material-ui/core\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport globals from \"../../../Services/Globals\";\r\nimport tokenAxios from \"../../../Services/interceptor\";\r\nimport notify from \"../../../Services/Notifilcation\";\r\nimport Coupon from \"../../../UserModel/Coupon\";\r\nimport Customer from \"../../../UserModel/Customer\";\r\nimport store from \"../../Redux/Store\";\r\nimport \"./CustomerDetails.css\";\r\n\r\n\r\n\r\nfunction CustomerDetails(): JSX.Element {\r\n  \r\n    const [gets, setGet] = useState<Customer>();\r\n    const history = useHistory();\r\n      const cust = useState(store.getState().authState.client);\r\n      const [coupon, setCoupon] = useState<Coupon[]>(store.getState().couponsState.coupons)\r\n\r\n      \r\n      useEffect(() => {\r\n          if (!store.getState().authState.client) {\r\n            notify.error(\"please login\");\r\n            history.push(\"/login\");\r\n          }\r\n  \r\n      const axiosGet = async () => {\r\n        // \"http://localhost:8080/customer/details/\",\r\n          const response = await tokenAxios.get<Customer>(\r\n        globals.urls.customers+\"details/\",\r\n             {\r\n              params: {\r\n                  customerId: cust[0].id,\r\n              }\r\n             } );\r\n          setGet(response.data);\r\n        \r\n        };\r\n        axiosGet();\r\n      },[]);\r\n\r\n\r\n console.log(gets);\r\n console.log(\"coupon: \",coupon[0]);\r\n\r\n\r\n    return (\r\n       \r\n       <>\r\n       <Table className=\"Table\" aria-label=\"simple table\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell>Id</TableCell>\r\n                    <TableCell align=\"right\">first name</TableCell>\r\n                    <TableCell align=\"right\"> last name</TableCell>\r\n                    <TableCell align=\"right\">email</TableCell>\r\n                    <TableCell align=\"right\">password</TableCell>\r\n                       \r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody >\r\n         \r\n         <TableRow>\r\n           <TableCell align=\"right\">{gets?.id}</TableCell>\r\n           <TableCell align=\"right\">{gets?.firstName}</TableCell>\r\n           <TableCell align=\"right\">{gets?.lastName}</TableCell>\r\n           <TableCell align=\"right\">{gets?.email}</TableCell>\r\n           <TableCell align=\"right\">{gets?.password}</TableCell>\r\n       \r\n      \r\n         </TableRow>\r\n       </TableBody>    \r\n                </Table>\r\n\r\n              \r\n              \r\n        </>\r\n    );\r\n}\r\n\r\nexport default CustomerDetails;\r\n","import { Table, TableHead, TableRow, TableCell, TableBody } from \"@material-ui/core\";\nimport { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport globals from \"../../../Services/Globals\";\nimport tokenAxios from \"../../../Services/interceptor\";\nimport notify from \"../../../Services/Notifilcation\";\nimport CompanyModel from \"../../../UserModel/CompanyModel\";\nimport store from \"../../Redux/Store\";\nimport \"./CompanyDetails.css\";\n\nfunction CompanyDetails(): JSX.Element {\n    const [gets, setGet] = useState<CompanyModel>();\n    const history = useHistory();\n      const cust = useState(store.getState().authState.client);\n  \n      \n      useEffect(() => {\n          if (!store.getState().authState.client) {\n            notify.error(\"please login\");\n            history.push(\"/login\");\n          }\n  \n      const axiosGet = async () => {\n        // \"http://localhost:8080/company/details/\",\n          const response = await tokenAxios.get<CompanyModel>(\n           globals.urls.company+\"details/\",\n             {\n              params: {\n                companyID: cust[0].id,\n              }\n             });\n          setGet(response.data);\n        \n        };\n        axiosGet();\n      },[]);\n\n\n console.log(gets);\n\n    return (\n       \n       <>\n       <Table className=\"Table\" aria-label=\"simple table\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Id</TableCell>\n                    <TableCell align=\"right\">first name</TableCell>\n                    <TableCell align=\"right\">email</TableCell>\n                    <TableCell align=\"right\">password</TableCell>\n                       \n                  </TableRow>\n                </TableHead>\n                <TableBody >\n         \n         <TableRow>\n           <TableCell align=\"right\">{gets?.id}</TableCell>\n           <TableCell align=\"right\">{gets?.firstName}</TableCell>\n           <TableCell align=\"right\">{gets?.email}</TableCell>\n           <TableCell align=\"right\">{gets?.password}</TableCell>\n       \n      \n         </TableRow>\n       </TableBody>    \n                </Table>\n\n                  </>\n    )\n}\n\nexport default CompanyDetails;\n","import { TableBody, TableRow, TableCell, Table, TableHead, TextField, Button, Card, CardActions, CardContent, CardMedia, Collapse, Grid, IconButton, Tooltip, Typography, makeStyles } from \"@material-ui/core\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport tokenAxios from \"../../../Services/interceptor\";\r\nimport notify from \"../../../Services/Notifilcation\";\r\nimport CouponGet from \"../../../UserModel/CouponGet\";\r\nimport store from \"../../Redux/Store\";\r\nimport \"./CompanyAdvanced.css\";\r\nimport clsx from 'clsx';\r\nimport ContactSupportIcon from '@material-ui/icons/ContactSupport';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Coupon from \"../../../UserModel/Coupon\";\r\nimport CreateIcon from \"@material-ui/icons/Create\";\r\nimport FormatListNumberedRtlIcon from \"@material-ui/icons/FormatListNumberedRtl\";\r\nimport globals from \"../../../Services/Globals\";\r\nimport Globals from \"../../../Services/Globals\";\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card:{\r\n   marginLeft: theme.spacing(11),\r\n  },\r\n   root: {\r\n     maxWidth: \"200px\",\r\n       margin: theme.spacing(4),\r\n     opacity: 1,\r\n     \"&:hover\":{\r\n         opacity: \"0.5\",\r\n         transition: \"1s\",\r\n         \r\n         }\r\n \r\n   },\r\n   paper:{\r\n       margin: theme.spacing(2),\r\n \r\n   },\r\n   expand: {\r\n    transform: 'rotate(0deg)',\r\n    marginLeft: 'auto',\r\n    transition: theme.transitions.create('transform', {\r\n      duration: theme.transitions.duration.shortest,\r\n    }),\r\n  },\r\n   media: {\r\n     height: \"200px\",\r\n     width: \"200px\",\r\n   },\r\n   tooltip:{\r\n     opacity: \"1\",\r\n   //   margin: theme.spacing(2),\r\n     \"&:hover\":{\r\n       opacity: \"1\",\r\n   }\r\n },\r\n expandOpen: {\r\n  transform: 'rotate(180deg)',\r\n},\r\nbtn:{\r\n  marginLeft: theme.spacing(45),\r\n  },\r\n }));\r\n\r\nfunction CompanyAdvanced(): JSX.Element {\r\n    \r\n \r\n\r\n\r\n    const [gets, setGet] = useState<CouponGet[]>([]);\r\n    const history = useHistory();\r\n      const cust = useState(store.getState().authState.client);\r\n      const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors },\r\n      } = useForm<any>();\r\n      const classes = useStyles();\r\n      const [expanded, setExpanded] = useState(false);\r\n    \r\n      const handleExpandClick = () => {\r\n        setExpanded(!expanded);\r\n      };\r\n      \r\n    \r\n\r\n\r\n      async function send(send: any) {\r\n      \r\n        console.log(send);\r\n\r\n        const byMax = {\r\n            companyId:cust[0].id,\r\n            prize: send.prize\r\n        }\r\n        // \"http://localhost:8080/company/coupon\"\r\n        const response = await tokenAxios.post<CouponGet[]>(\r\n          globals.urls.company+\"coupon\"\r\n,byMax)\r\n        setGet(response.data);\r\n   \r\n    };\r\n\r\n    async function deleteCoupon(id){\r\n     \r\n      console.log(\"id to delete: \"+id);\r\n      // \"http://localhost:8080/company/coupons/\"\r\n      const deleteCoupon = await tokenAxios.delete<any>(globals.urls.company+\"coupons/\"+id) ;\r\n    }\r\n\r\n    \r\n    async function updateCoupon(id) {\r\n      history.push(\"/coupon/\" + id);\r\n    }\r\n    //  const result = gets.map((get) => {\r\n    //     return (\r\n         \r\n    //         <TableRow key={get.id}>\r\n    //           <TableCell>{get.id} </TableCell>\r\n    //           <TableCell align=\"right\">{get.category}</TableCell>\r\n    //           <TableCell align=\"right\">{get.title}</TableCell>\r\n    //           <TableCell align=\"right\">{get.description}</TableCell>\r\n    //           <TableCell align=\"right\">{get.startDate}</TableCell>\r\n    //           <TableCell align=\"right\">{get.endDate}</TableCell>\r\n    //           <TableCell align=\"right\">{get.amount}</TableCell>\r\n    //           <TableCell align=\"right\">{get.price}</TableCell>\r\n    //           <TableCell align=\"right\">{get.image}</TableCell>\r\n            \r\n    //         </TableRow>\r\n      \r\n    //     );\r\n    //   });\r\n\r\n    const result = gets.map((coupon) => {\r\n    \r\n      return (\r\n      <div>\r\n      <Grid spacing={5} >\r\n        <Card className={classes.root} >\r\n          \r\n              <CardContent>\r\n                <Typography>{coupon?.description}</Typography>\r\n              </CardContent>\r\n              <CardMedia\r\n                className={classes.media}\r\n                // \"http://localhost:8080/client/coupons/images/\" \r\n              \r\n                image={globals.urls.images+ coupon?.imageID}\r\n              \r\n              />\r\n        \r\n        <CardActions>\r\n              <Tooltip\r\n                title={\"delete coupon\"}\r\n                arrow\r\n                className={classes.tooltip}\r\n              >\r\n                <IconButton>\r\n                  <DeleteIcon onClick={() => deleteCoupon(coupon.id)} />\r\n                </IconButton>\r\n              </Tooltip>\r\n\r\n              <Tooltip\r\n                title={\"update coupon\"}\r\n                arrow\r\n                className={classes.tooltip}\r\n              >\r\n                <IconButton>\r\n                  <CreateIcon onClick={() => updateCoupon(coupon.id)} />\r\n                </IconButton>\r\n              </Tooltip>\r\n\r\n              <Tooltip\r\n                title={\"the amount is: \" + coupon?.amount}\r\n                arrow\r\n                className={classes.tooltip}\r\n              >\r\n                <IconButton>\r\n                  <FormatListNumberedRtlIcon />\r\n                </IconButton>\r\n              </Tooltip>\r\n            </CardActions>\r\n            </Card>\r\n           \r\n            <br/>\r\n            <br/>\r\n          </Grid>\r\n\r\n          </div>\r\n    \r\n    );\r\n \r\n  });\r\n\r\n   \r\n      return (\r\n        <>\r\n{gets.length===0?\r\n    <>\r\n    \r\n                <form onSubmit={handleSubmit(send)}>\r\n              <TextField\r\n                id=\"outlined-basic\"\r\n                label=\"max prise\"\r\n                variant=\"outlined\"\r\n                type=\"number\"\r\n                {...register(\"prize\")}\r\n              />\r\n              <br/>\r\n              <br/>\r\n                <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n              >\r\n                Check out\r\n              </Button>\r\n              </form>\r\n              </>\r\n              :\r\n        <>\r\n        {/* <Table className=\"Table\" aria-label=\"simple table\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell>Id</TableCell>\r\n                    <TableCell align=\"right\"> category&nbsp;</TableCell>\r\n                    <TableCell align=\"right\">title&nbsp;</TableCell>\r\n                    <TableCell align=\"right\">description&nbsp;</TableCell>\r\n                    <TableCell align=\"right\">startDate&nbsp;</TableCell>\r\n                    <TableCell align=\"right\">endDate&nbsp;</TableCell>\r\n                    <TableCell align=\"right\">amount&nbsp;</TableCell>\r\n                    <TableCell align=\"right\">price&nbsp;</TableCell>\r\n                    <TableCell align=\"right\">image&nbsp;</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                {gets && result}\r\n                </TableBody>\r\n                </Table> */}\r\n    \r\n\r\n    <>\r\n         \r\n         <Grid container className={classes.card} >\r\n\r\n   {gets && result}\r\n\r\n</Grid>\r\n\r\n     </>\r\n                \r\n                <br/>\r\n                <br/>\r\n\r\n           \r\n                <Button\r\n            onClick={() => history.push(\"/\")}\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            className={classes.btn}\r\n          >\r\n            home\r\n          </Button>   \r\n           \r\n            <Button\r\n            onClick={() => history.goBack()}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.btn}\r\n\r\n          >\r\n            back\r\n          </Button>\r\n        \r\n                  \r\n      \r\n\r\n                </>\r\n\r\n\r\n}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CompanyAdvanced;\r\n\r\n\r\n","import { TableBody, TableRow, TableCell, TextField, Button, Table, TableHead, FormControl, InputLabel, MenuItem, Select, makeStyles, Card, CardActions, CardContent, CardMedia, Collapse, Grid, IconButton, Tooltip, Typography } from \"@material-ui/core\";\r\nimport { useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport tokenAxios from \"../../../Services/interceptor\";\r\nimport Coupon from \"../../../UserModel/Coupon\";\r\nimport store from \"../../Redux/Store\";\r\nimport \"./CouponsCategory.css\";\r\nimport clsx from 'clsx';\r\nimport ContactSupportIcon from '@material-ui/icons/ContactSupport';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport CouponGet from \"../../../UserModel/CouponGet\";\r\nimport FormatListNumberedRtlIcon from \"@material-ui/icons/FormatListNumberedRtl\";\r\nimport CreateIcon from \"@material-ui/icons/Create\";\r\nimport globals from \"../../../Services/Globals\";\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card:{\r\n   marginLeft: theme.spacing(11),\r\n  },\r\n   root: {\r\n     maxWidth: \"200px\",\r\n       margin: theme.spacing(4),\r\n     opacity: 1,\r\n     \"&:hover\":{\r\n         opacity: \"0.5\",\r\n         transition: \"1s\",\r\n         \r\n         }\r\n \r\n   },\r\n   paper:{\r\n       margin: theme.spacing(2),\r\n \r\n   },\r\n   expand: {\r\n    transform: 'rotate(0deg)',\r\n    marginLeft: 'auto',\r\n    transition: theme.transitions.create('transform', {\r\n      duration: theme.transitions.duration.shortest,\r\n    }),\r\n  },\r\n   media: {\r\n     height: \"200px\",\r\n     width: \"200px\",\r\n   },\r\n   tooltip:{\r\n     opacity: \"1\",\r\n   //   margin: theme.spacing(2),\r\n     \"&:hover\":{\r\n       opacity: \"1\",\r\n   }\r\n },\r\n expandOpen: {\r\n  transform: 'rotate(180deg)',\r\n},\r\nbtn:{\r\nmarginLeft: theme.spacing(45),\r\n},\r\n }));\r\n\r\nfunction CouponsCategory(): JSX.Element {\r\n\r\n    const [gets, setGet] = useState<CouponGet[]>([]);\r\n    const history = useHistory();\r\n      const cust = useState(store.getState().authState.client);\r\n      const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors },\r\n      } = useForm<any>();\r\n      const [open, setOpen] = useState(false);\r\n  const [age, setAge] = useState<string | number>(\"\");\r\n  const classes = useStyles();\r\n  const [expanded, setExpanded] = useState(false);\r\n\r\n  const handleExpandClick = () => {\r\n    setExpanded(!expanded);\r\n  };\r\n  \r\n\r\n      const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n        setAge(event.target.value as number);\r\n      };\r\n    \r\n      const handleClose = () => {\r\n        setOpen(false);\r\n      };\r\n    \r\n      const handleOpen = () => {\r\n        setOpen(true);\r\n      };\r\n\r\n      \r\n\r\n      async function send(send: any) {\r\n        \r\n        console.log(store.getState().authState.client);\r\n      if(store.getState().authState.client===null){\r\n        history.push(\"/login\")\r\n      }\r\n        console.log(send);\r\n\r\n        const byCategory = {\r\n            companyId:cust[0].id,\r\n            category: send.category\r\n        }\r\n        // \"http://localhost:8080/company/category\"     \r\n        const response = await tokenAxios.post<CouponGet[]>(\r\n  globals.urls.company+\"category\",byCategory)\r\n        setGet(response.data);\r\n   \r\n    };\r\n\r\n    async function deleteCoupon(id) {\r\n      console.log(\"id to delete: \" + id);\r\n      // \"http://localhost:8080/company/coupons/\"\r\n      const deleteCoupon = await tokenAxios.delete<any>(\r\n        globals.urls.company+\"coupons/\" + id\r\n      );\r\n    }\r\n  \r\n    async function updateCoupon(id) {\r\n      history.push(\"/coupon/\" + id);\r\n    }\r\n\r\n    \r\n    // const result = gets.map((get) => {\r\n    //     return (\r\n          \r\n    //       <TableBody key={get.id}>\r\n    //         <TableRow>\r\n    //           <TableCell>{get.id} </TableCell>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n    //           <TableCell align=\"right\">{get.companyID}</TableCell>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n    //           <TableCell align=\"right\">{get.category}</TableCell>&nbsp;\r\n    //           <TableCell align=\"right\">{get.title}</TableCell>\r\n    //           <TableCell align=\"right\">{get.description}</TableCell>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n    //           <TableCell align=\"right\">{get.startDate}</TableCell>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n    //           <TableCell align=\"right\">{get.endDate}</TableCell>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n    //           <TableCell align=\"right\">{get.amount}</TableCell>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n    //           <TableCell align=\"right\">{get.price}</TableCell>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n    //           <TableCell align=\"right\">{get.image}</TableCell>\r\n            \r\n    //         </TableRow>\r\n    //       </TableBody>\r\n    //     );\r\n    //   });\r\n\r\n    \r\n    // \r\n    \r\n    const result = gets.map((coupon) => {\r\n    \r\n      return (\r\n      <div key={coupon.id}>\r\n      <Grid spacing={5} >\r\n        <Card className={classes.root} >\r\n          \r\n              <CardContent>\r\n    \r\n                <Typography>{coupon?.description}</Typography>\r\n              </CardContent>\r\n              <CardMedia\r\n                className={classes.media}\r\n                // \"http://localhost:8080/client/coupons/images/\" + coupon?.imageID\r\n              \r\n                image={globals.urls.images+coupon?.imageID}\r\n              \r\n              />\r\n        \r\n        <CardActions>\r\n              <Tooltip\r\n                title={\"delete coupon\"}\r\n                arrow\r\n                className={classes.tooltip}\r\n              >\r\n                <IconButton>\r\n                  <DeleteIcon onClick={() => deleteCoupon(coupon.id)} />\r\n                </IconButton>\r\n              </Tooltip>\r\n\r\n              <Tooltip\r\n                title={\"update coupon\"}\r\n                arrow\r\n                className={classes.tooltip}\r\n              >\r\n                <IconButton>\r\n                  <CreateIcon onClick={() => updateCoupon(coupon.id)} />\r\n                </IconButton>\r\n              </Tooltip>\r\n\r\n              <Tooltip\r\n                title={\"the amount is: \" + coupon?.amount}\r\n                arrow\r\n                className={classes.tooltip}\r\n              >\r\n                <IconButton>\r\n                  <FormatListNumberedRtlIcon />\r\n                </IconButton>\r\n              </Tooltip>\r\n            </CardActions>\r\n         \r\n         \r\n            </Card>\r\n           \r\n            <br/>\r\n            <br/>\r\n          </Grid>\r\n\r\n          </div>\r\n    \r\n    );\r\n \r\n  });\r\n\r\n   \r\n\r\n      return (\r\n        <>\r\n{gets.length===0?\r\n    <>\r\n                <form onSubmit={handleSubmit(send)}>\r\n           \r\n                <FormControl >\r\n                <InputLabel id=\"demo-controlled-open-select-label\">\r\ncategory                </InputLabel>\r\n                <Select\r\n                  labelId=\"demo-controlled-open-select-label\"\r\n                  id=\"demo-controlled-open-select\"\r\n                  defaultValue=\"category\"\r\n                  open={open}\r\n                  onClose={handleClose}\r\n                  onOpen={handleOpen}\r\n                  onChange={handleChange}\r\n                  {...register(\"category\", {\r\n                    required: { value: true, message: \"Missing User Type\" },\r\n                  })}\r\n                >\r\n                  <MenuItem value=\"\">\r\n                    <em>Category:</em>\r\n                  </MenuItem>\r\n                  <MenuItem value=\"FOOD\">FOOD</MenuItem>\r\n                  <MenuItem value=\"ELECTRICITY\">ELECTRICITY</MenuItem>\r\n                  <MenuItem value=\"RESTAURANT\">RESTAURANT</MenuItem>\r\n                  <MenuItem value=\"VACATION\">VACATION</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n\r\n              <br/>\r\n              <br/>\r\n                <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n              >\r\n                Check out\r\n              </Button>\r\n              </form>\r\n              </>\r\n              :\r\n        <>\r\n        {/* <Table className=\"Table\" aria-label=\"simple table\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell>Id</TableCell>\r\n                    <TableCell align=\"right\"> category&nbsp;</TableCell>\r\n                    <TableCell align=\"right\">title&nbsp;</TableCell>\r\n                    <TableCell align=\"right\">description&nbsp;</TableCell>\r\n                    <TableCell align=\"right\">startDate&nbsp;</TableCell>\r\n                    <TableCell align=\"right\">endDate&nbsp;</TableCell>\r\n                    <TableCell align=\"right\">amount&nbsp;</TableCell>\r\n                    <TableCell align=\"right\">price&nbsp;</TableCell>\r\n                    <TableCell align=\"right\">image&nbsp;</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n\r\n                <TableBody>\r\n      \r\n        {gets && result}\r\n\r\n        \r\n</TableBody> */}\r\n\r\n                {/* </Table> */}\r\n    \r\n    <Grid container className={classes.card} >\r\n\r\n    {gets && result}\r\n \r\n </Grid>\r\n                \r\n                <br/>\r\n                <br/>\r\n\r\n                <Button\r\n            onClick={() => history.push(\"/\")}\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            className={classes.btn}\r\n          >\r\n            home\r\n          </Button>   \r\n           \r\n            <Button\r\n            onClick={() => history.goBack()}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.btn}\r\n\r\n          >\r\n            back\r\n          </Button>\r\n        \r\n\r\n             \r\n                </>\r\n\r\n\r\n}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CouponsCategory;\r\n","import {\r\n  TableRow,\r\n  TableCell,\r\n  Table,\r\n  TableHead,\r\n  TableBody,\r\n  IconButton,\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  CardMedia,\r\n  Grid,\r\n  makeStyles,\r\n  Tooltip,\r\n  Typography,\r\n  Collapse,\r\n} from \"@material-ui/core\";\r\nimport clsx from 'clsx';\r\nimport { useState, useEffect } from \"react\";\r\nimport CreateIcon from \"@material-ui/icons/Create\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport tokenAxios from \"../../../Services/interceptor\";\r\nimport notify from \"../../../Services/Notifilcation\";\r\nimport Coupon from \"../../../UserModel/Coupon\";\r\nimport store from \"../../Redux/Store\";\r\nimport \"./Coupons.css\";\r\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\r\nimport { CouponDownloadedAction } from \"../../Redux/CouponsState\";\r\nimport axios from \"axios\";\r\nimport CouponGet from \"../../../UserModel/CouponGet\";\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport ContactSupportIcon from '@material-ui/icons/ContactSupport';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport MonetizationOnIcon from '@material-ui/icons/MonetizationOn';\r\nimport EventAvailableIcon from '@material-ui/icons/EventAvailable';\r\nimport globals from \"../../../Services/Globals\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  card:{\r\n   marginLeft: theme.spacing(11),\r\n  },\r\n   root: {\r\n     maxWidth: \"230px\",\r\n       margin: theme.spacing(4),\r\n     opacity: 1,\r\n     \"&:hover\":{\r\n         opacity: \"0.5\",\r\n         transition: \"1s\",\r\n         \r\n         }\r\n \r\n   },\r\n   paper:{\r\n       margin: theme.spacing(2),\r\n \r\n   },\r\n   expand: {\r\n    transform: 'rotate(0deg)',\r\n    marginLeft: 'auto',\r\n    transition: theme.transitions.create('transform', {\r\n      duration: theme.transitions.duration.shortest,\r\n    }),\r\n  },\r\n   media: {\r\n     height: \"220px\",\r\n     width: \"220px\",\r\n   },\r\n   tooltip:{\r\n     opacity: \"1\",\r\n   //   margin: theme.spacing(2),\r\n     \"&:hover\":{\r\n       opacity: \"1\",\r\n   }\r\n },\r\n expandOpen: {\r\n  transform: 'rotate(180deg)',\r\n},\r\n }));\r\n \r\n\r\n\r\nfunction Coupons(): JSX.Element {\r\n  const [gets, setGet] = useState<CouponGet[]>([]);\r\n  const classes = useStyles();\r\n  const [expanded, setExpanded] = useState(false);\r\n\r\n  const handleExpandClick = () => {\r\n    setExpanded(!expanded);\r\n  };\r\n  \r\n  const customer = useState(store.getState().authState.client);\r\n  //const coupons = useState(store.getState().couponsState.coupons.)\r\n\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const axiosGet = async () => {\r\n      // \"http://localhost:8080/client/coupons\"\r\n      const response = await axios.get<CouponGet[]>(\r\n         globals.urls.client+\"coupons\"\r\n      );\r\n      const allCoupons = response.data;\r\n     \r\n     // store.dispatch(CouponDownloadedAction(allCoupons));\r\n     \r\n      setGet(response.data);\r\n      \r\n      console.log(response.data);\r\n    };\r\n    axiosGet();\r\n  \r\n}, []);\r\n\r\n\r\n  async function buyCoupon(id) {\r\n  \r\n    console.log(\"customer: \"+customer[0]);\r\n\r\n    if(customer[0]===null) {\r\n  history.push(\"login\");\r\n  notify.error(\"you have to login if you want to buy a coupon!\");\r\n  return;\r\n\r\n}\r\n    \r\n    console.log(id);\r\n\r\nconst myCoupon = gets.find(x => x.id === id);\r\n\r\n    const coupon = {\r\n     \r\n      id: id,\r\n      companyID: myCoupon.companyID,\r\n      category: myCoupon.category,\r\n      title: myCoupon.title,\r\n      description: myCoupon.description,\r\n      startDate: myCoupon.startDate,\r\n      endDate: myCoupon.endDate,\r\n      amount: myCoupon.amount,\r\n      price:myCoupon.price,\r\n      imageID: myCoupon.imageID,\r\n    \r\n    };\r\n    console.log(coupon); \r\n   \r\n    try {\r\n      // \"http://localhost:8080/customer/buy\"\r\n      const result = await tokenAxios.post<CouponGet>(\r\n    globals.urls.customers+\"buy\",\r\n        coupon,{\r\n        params: {\r\n          customerId: customer[0].id\r\n        }\r\n      }\r\n      );\r\n      history.push(\"/area\");\r\n      notify.success(\"coupon added successfully!\");\r\n    } catch (err) {\r\n      notify.error(\"you can  buy coupon only once!\");\r\n    }\r\n  }\r\n\r\n  const result = gets.map((coupon) => {\r\n    return (\r\n      <>\r\n        {/* <TableRow key={get.id}>\r\n          <TableCell>{get.id} </TableCell>\r\n          <TableCell align=\"right\">{get.companyID}</TableCell>\r\n          <TableCell align=\"right\">{get.category}</TableCell>\r\n          <TableCell align=\"right\">{get.title}</TableCell>\r\n          <TableCell align=\"right\">{get.description}</TableCell>\r\n          <TableCell align=\"right\">{get.startDate}</TableCell>\r\n          <TableCell align=\"right\">{get.endDate}</TableCell>\r\n          <TableCell align=\"right\">{get.amount}</TableCell>\r\n          <TableCell align=\"right\">{get.price}</TableCell>\r\n          <TableCell align=\"right\">{get.image}</TableCell>\r\n          <TableCell align=\"right\">\r\n            <IconButton>\r\n              <ShoppingCartIcon onClick={() => buyCoupon(get.id)} />\r\n            </IconButton>\r\n          </TableCell>\r\n        </TableRow> */}\r\n\r\n<Grid spacing={5} >\r\n        <Card className={classes.root} >\r\n          \r\n              <CardContent>\r\n                <Typography>{coupon?.description}</Typography>\r\n  \r\n              \r\n              </CardContent>\r\n              <CardMedia\r\n                className={classes.media}\r\n                // image={\"http://localhost:8080/client/coupons/images/\" + coupon?.imageID}\r\n                image= {globals.urls.images+ coupon?.imageID}\r\n              />\r\n        \r\n              <CardActions>\r\n              {/* <IconButton aria-label=\"add to favorites\"\r\n           \r\n              >\r\n            \r\n              <DeleteIcon />\r\n            \r\n            </IconButton> */}  \r\n           \r\n          \r\n    \r\n            {/* <IconButton>\r\n              <ShoppingCartIcon onClick={() => buyCoupon(coupon?.id)} />\r\n            </IconButton> */}\r\n\r\n<Tooltip title={\"buy coupon!\"} arrow \r\nclassName={classes.tooltip}\r\nonClick={() => buyCoupon(coupon?.id)}\r\n>\r\n        \r\n        <IconButton>       \r\n             \r\n             <              ShoppingCartIcon\r\n/>\r\n \r\n  </IconButton>\r\n      </Tooltip>\r\n\r\n            \r\n\r\n\r\n\r\n\r\n            <Tooltip title={coupon?.title} arrow className={classes.tooltip}>\r\n        \r\n          <IconButton>       \r\n               \r\n               <ContactSupportIcon />\r\n   \r\n    </IconButton>\r\n        </Tooltip>  \r\n         \r\n            <Tooltip title={coupon?.amount+\"$\"} arrow className={classes.tooltip}>\r\n        \r\n          <IconButton>       \r\n               \r\n               <MonetizationOnIcon />\r\n   \r\n    </IconButton>\r\n        </Tooltip>\r\n                \r\n                  <Tooltip title={\"will be expired in: \"+coupon?.endDate} arrow className={classes.tooltip}>\r\n        \r\n          <IconButton>       \r\n               \r\n               <              EventAvailableIcon\r\n />\r\n   \r\n    </IconButton>\r\n        </Tooltip>\r\n           \r\n              </CardActions>\r\n           \r\n              {/* <CardActions disableSpacing>\r\n              <IconButton aria-label=\"add to favorites\"\r\n              onClick={()=>console.log(coupon.id)}\r\n              >\r\n              <ContactSupportIcon />\r\n          \r\n            </IconButton>\r\n        \r\n            <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n            \r\n            <CardContent>\r\n         \r\n            <Typography paragraph>{coupon.description}</Typography>\r\n\r\n            </CardContent>\r\n         \r\n            </Collapse>\r\n      \r\n            <IconButton\r\n          className={clsx(classes.expand, {\r\n            [classes.expandOpen]: expanded,\r\n          })}\r\n          onClick={handleExpandClick}\r\n          aria-expanded={expanded}\r\n          aria-label=\"show more\"\r\n        >\r\n          <ExpandMoreIcon />\r\n        </IconButton>\r\n             \r\n              </CardActions> */}\r\n         \r\n         \r\n            </Card>\r\n           \r\n            <br/>\r\n            <br/>\r\n          </Grid>\r\n\r\n\r\n\r\n      </>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <>\r\n      {/* <Table className=\"Table\" aria-label=\"simple table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Id</TableCell>\r\n            <TableCell align=\"right\">company id</TableCell>\r\n            <TableCell align=\"right\"> category&nbsp;</TableCell>\r\n            <TableCell align=\"right\">title&nbsp;</TableCell>\r\n            <TableCell align=\"right\">description&nbsp;</TableCell>\r\n            <TableCell align=\"right\">startDate&nbsp;</TableCell>\r\n            <TableCell align=\"right\">endDate&nbsp;</TableCell>\r\n            <TableCell align=\"right\">amount&nbsp;</TableCell>\r\n            <TableCell align=\"right\">price&nbsp;</TableCell>\r\n            <TableCell align=\"right\">image&nbsp;</TableCell>\r\n            <TableCell align=\"right\">buy&nbsp;</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n\r\n        <TableBody>{gets && result}</TableBody>\r\n   \r\n      </Table> */}\r\n             \r\n              <Grid container className={classes.card} >\r\n\r\n              {gets && result}\r\n          \r\n             </Grid>\r\n   \r\n    </>\r\n  );\r\n}\r\n\r\nexport default Coupons;\r\n","import \"./AddCompany.css\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  FormControl,\r\n  FormHelperText,\r\n  IconButton,\r\n  InputAdornment,\r\n  InputLabel,\r\n  makeStyles,\r\n  MenuItem,\r\n  OutlinedInput,\r\n  Select,\r\n  TextField,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport clsx from \"clsx\";\r\n\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport notify from \"../../../Services/Notifilcation\";\r\nimport UserModel from \"../../../UserModel/UserModel\";\r\nimport { EmployeesAddedAction } from \"../../Redux/EmployeesSatate\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport Papering from \"../../HomeArea/Papering/Papering\";\r\nimport { useState } from \"react\";\r\nimport UserAuthModel from \"../../../UserModel/UserAuthModel\";\r\nimport store from \"../../Redux/Store\";\r\nimport { registerAction } from \"../../Redux/AuthState\";\r\nimport CompanyModel from \"../../../UserModel/CompanyModel\";\r\nimport tokenAxios from \"../../../Services/interceptor\";\r\nimport React from \"react\";\r\nimport { Visibility, VisibilityOff } from \"@material-ui/icons\";\r\nimport globals from \"../../../Services/Globals\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    minWidth: 275,\r\n  },\r\n\r\n  pos: {\r\n    marginBottom: 0,\r\n    marginLeft: \"27%\",\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n  },\r\n  box: {\r\n    marginLeft: \"39%\",\r\n    maxWidth: \"50px\",\r\n    marginTop: \"70px\",\r\n  },\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n    marginLeft: \"20px\",\r\n  },\r\n  withoutLabel: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  textField: {\r\n    width: \"25ch\",\r\n  },\r\n  btn: {\r\n    marginLeft: theme.spacing(4),\r\n  },\r\n}));\r\n\r\nfunction AddCompany(): JSX.Element {\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm<CompanyModel>();\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  const [age, setAge] = useState<string | number>(\"\");\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const [values, setValues] = React.useState({\r\n    showPassword: false,\r\n  });\r\n\r\n  const handleChange = (prop) => (event) => {\r\n    setValues({ ...values, [prop]: event.target.value });\r\n  };\r\n\r\n  const handleClickShowPassword = () => {\r\n    setValues({ ...values, showPassword: !values.showPassword });\r\n  };\r\n\r\n  const handleMouseDownPassword = (event) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  //   const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n  //     setAge(event.target.value as number);\r\n  //   };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  async function send(company: CompanyModel) {\r\n    console.log(company);\r\n    const addCompany = {\r\n      firstName: company.firstName,\r\n      email: company.email,\r\n      password: company.password,\r\n      clientType: \"COMPANY\",\r\n    };\r\n\r\n    try {\r\n      // \"http://localhost:8080/admin/companies\",\r\n      const response = await tokenAxios.post<CompanyModel>(\r\n        globals.urls.admin+\"companies\",\r\n        addCompany\r\n      );\r\n\r\n      // store.dispatch(registerAction(response.data));\r\n\r\n      notify.success(\"company added successfully!\");\r\n      history.push(\"/companies\");\r\n    } catch (err) {\r\n      notify.error(\"something went wrong!\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Box className={classes.box}>\r\n      <div>\r\n        <Card className={classes.root}>\r\n          <CardContent>\r\n            <Typography className={classes.pos}>Add company</Typography>\r\n\r\n            <form onSubmit={handleSubmit(send)}>\r\n              {/* <TextField\r\n                className={classes.textField}\r\n                id=\"outlined-basic\"\r\n                label=\"name\"\r\n                variant=\"outlined\"\r\n                type=\"text\"\r\n                {...register(\"firstName\", {\r\n                  required: {\r\n                    value: true,\r\n                    message: \"your name is required\",\r\n                  },\r\n                  maxLength: {\r\n                    value: 30,\r\n                    message: \"your name can not be greater than 30\",\r\n                  },\r\n                  minLength: {\r\n                    value: 2,\r\n                    message: \"your name can not be less than 2 chars\",\r\n                  },\r\n                })}\r\n              />\r\n\r\n              <br />\r\n\r\n              <FormHelperText error={true}>\r\n                {errors.firstName?.message}\r\n              </FormHelperText>\r\n\r\n              <br />\r\n\r\n              <TextField\r\n                id=\"outlined-basic\"\r\n                label=\"email\"\r\n                variant=\"outlined\"\r\n                type=\"email\"\r\n                {...register(\"email\", {\r\n                  minLength: {\r\n                    value: 5,\r\n                    message: \"you must insert email\",\r\n                  },\r\n                })}\r\n              />\r\n\r\n              <FormHelperText error={true}>\r\n                {errors.email?.message}\r\n              </FormHelperText>\r\n              <br /> */}\r\n              {/* <TextField\r\n                    id=\"outlined-basic\"\r\n                    label=\"password\"\r\n                    variant=\"outlined\"\r\n                    type=\"password\"\r\n                    {...register(\"password\", {\r\n                      minLength: {\r\n                        value: 5,\r\n                        message: \"your password can not be less than 5 chars\",\r\n                      },\r\n                    })}\r\n                  />\r\n                  <br />\r\n                  <FormHelperText error={true}>\r\n                    {errors.password?.message}\r\n                  </FormHelperText>\r\n\r\n                   */}\r\n\r\n              <br />\r\n              <FormControl\r\n                variant=\"outlined\"\r\n                className={clsx(classes.margin, classes.textField)}\r\n              >\r\n                {\" \"}\r\n                <InputLabel>Name</InputLabel>\r\n                <OutlinedInput\r\n                  id=\"outlined-adornment-password\"\r\n                  type=\"text\"\r\n                  {...register(\"firstName\", {\r\n                    required: {\r\n                      value: true,\r\n                      message: \"your name is required\",\r\n                    },\r\n                    maxLength: {\r\n                      value: 30,\r\n                      message: \"your name can not be greater than 30\",\r\n                    },\r\n                    minLength: {\r\n                      value: 2,\r\n                      message: \"your name can not be less than 2 chars\",\r\n                    },\r\n                  })}\r\n                  endAdornment={\r\n                    <InputAdornment position=\"end\">\r\n                      <IconButton\r\n                        aria-label=\"toggle password visibility\"\r\n                        edge=\"end\"\r\n                      ></IconButton>\r\n                    </InputAdornment>\r\n                  }\r\n                  labelWidth={45}\r\n                />\r\n              </FormControl>\r\n\r\n              <FormHelperText error={true}>\r\n                {errors.firstName?.message}\r\n              </FormHelperText>\r\n\r\n              <br />\r\n\r\n              <FormControl\r\n                variant=\"outlined\"\r\n                className={clsx(classes.margin, classes.textField)}\r\n              >\r\n                {\" \"}\r\n                <InputLabel>Email</InputLabel>\r\n                <OutlinedInput\r\n                  id=\"outlined-adornment-password\"\r\n                  type=\"email\"\r\n                  {...register(\"email\", {\r\n                    minLength: {\r\n                      value: 5,\r\n                      message: \"you must insert email\",\r\n                    },\r\n                  })}\r\n                  endAdornment={\r\n                    <InputAdornment position=\"end\">\r\n                      <IconButton\r\n                        aria-label=\"toggle password visibility\"\r\n                        edge=\"end\"\r\n                      ></IconButton>\r\n                    </InputAdornment>\r\n                  }\r\n                  labelWidth={45}\r\n                />\r\n              </FormControl>\r\n\r\n              <FormHelperText error={true}>\r\n                {errors.email?.message}\r\n              </FormHelperText>\r\n\r\n              <br />\r\n\r\n              <FormControl\r\n                className={clsx(classes.margin, classes.textField)}\r\n                variant=\"outlined\"\r\n              >\r\n                <InputLabel htmlFor=\"outlined-adornment-password\">\r\n                  Password\r\n                </InputLabel>\r\n                <OutlinedInput\r\n                  id=\"outlined-adornment-password\"\r\n                  type={values.showPassword ? \"text\" : \"password\"}\r\n                  onChange={handleChange(\"password\")}\r\n                  {...register(\"password\", {\r\n                    minLength: {\r\n                      value: 5,\r\n                      message: \"your password can not be less than 5 chars\",\r\n                    },\r\n                  })}\r\n                  endAdornment={\r\n                    <InputAdornment position=\"end\">\r\n                      <IconButton\r\n                        aria-label=\"toggle password visibility\"\r\n                        onClick={handleClickShowPassword}\r\n                        onMouseDown={handleMouseDownPassword}\r\n                        edge=\"end\"\r\n                      >\r\n                        {values.showPassword ? (\r\n                          <Visibility />\r\n                        ) : (\r\n                          <VisibilityOff />\r\n                        )}\r\n                      </IconButton>\r\n                    </InputAdornment>\r\n                  }\r\n                  labelWidth={70}\r\n                />\r\n              </FormControl>\r\n\r\n              <FormHelperText error={true}>\r\n                {errors.password?.message}\r\n              </FormHelperText>\r\n\r\n              <br />\r\n\r\n              <Button\r\n                className={classes.btn}\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n              >\r\n                add\r\n              </Button>\r\n\r\n              <Button\r\n                onClick={() => history.goBack()}\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                className={classes.btn}\r\n              >\r\n                back\r\n              </Button>\r\n            </form>\r\n          </CardContent>\r\n    \r\n          {/* <Button onClick={()=>history.push(\"/find/customer\")} className={classes.btn}\r\n             color=\"primary\"\r\n               variant=\"contained\"\r\n             >\r\n              \r\n             test\r\n           \r\n            </Button> */}\r\n\r\n          <br />\r\n        </Card>\r\n      </div>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default AddCompany;\r\n","import \"./EditCompany.css\";\r\nimport {\r\n  Box,\r\n    Button,\r\n    Card,\r\n    CardContent,\r\n    FormControl,\r\n    FormHelperText,\r\n    IconButton,\r\n    InputAdornment,\r\n    InputLabel,\r\n    makeStyles,\r\n    OutlinedInput,\r\n    TextField,\r\n    Typography,\r\n  } from \"@material-ui/core\";\r\n  import clsx from \"clsx\";\r\n\r\n  import { useForm } from \"react-hook-form\";\r\n  import { RouteComponentProps, useHistory } from \"react-router-dom\";\r\n  import notify from \"../../../Services/Notifilcation\";\r\nimport { useState } from \"react\";\r\nimport UserModel from \"../../../UserModel/UserModel\";\r\nimport store from \"../../Redux/Store\";\r\nimport Globals from \"../../../Services/Globals\";\r\nimport tokenAxios from \"../../../Services/interceptor\";\r\nimport CompanyModel from \"../../../UserModel/CompanyModel\";\r\nimport { Visibility, VisibilityOff } from \"@material-ui/icons\";\r\nimport React from \"react\";\r\nimport globals from \"../../../Services/Globals\";\r\n\r\n\r\ninterface RouteParam {\r\n    id: string;\r\n  }\r\n  \r\n  interface EditDetailsProps extends RouteComponentProps<RouteParam> { }\r\n  \r\n  const useStyles = makeStyles((theme)=>({\r\n    root: {\r\n      minWidth: 275,\r\n    },\r\n    box: {\r\n      marginLeft: \"39%\",\r\n      maxWidth: \"50px\",\r\n      marginTop: \"70px\",\r\n    },\r\n    pos: {\r\n      marginBottom: 0,\r\n      marginLeft: \"27%\",\r\n    },\r\n margin: {\r\n      margin: theme.spacing(1),\r\n      marginLeft: \"20px\"\r\n    },\r\n    withoutLabel: {\r\n      marginTop: theme.spacing(3),\r\n    },\r\n    textField: {\r\n      width: \"25ch\",\r\n    },\r\n    btn:{\r\n      marginLeft: theme.spacing(4),\r\n    },\r\n  }));\r\n\r\nfunction EditCompany(props:EditDetailsProps): JSX.Element {\r\n\r\n    const { register, handleSubmit, formState: { errors }, } = useForm<CompanyModel>({\r\n    });\r\n       const history = useHistory();\r\n       const classes = useStyles();\r\n       const currentId = +props.match.params?.id \r\n    const [company, setCompany] = useState(store.getState().employeeState.employees.find((c)=>c.id === +props.match.params?.id ));\r\n   \r\n    const [client,setClient] = useState(store.getState().authState.client);\r\n   \r\n   const [customer, setCustomer] = useState()\r\n\r\n   const [values, setValues] = React.useState({\r\n    showPassword: false,\r\n  });\r\n\r\n  const handleChange = (prop) => (event) => {\r\n    setValues({ ...values, [prop]: event.target.value });\r\n  };\r\n\r\n  const handleClickShowPassword = () => {\r\n    setValues({ ...values, showPassword: !values.showPassword });\r\n  };\r\n\r\n  const handleMouseDownPassword = (event) => {\r\n    event.preventDefault();\r\n  };\r\n   \r\n\r\n   async function send(user:UserModel) {\r\n    user.id = currentId\r\n    const putCompany = {\r\n     \r\n      id: user?.id,\r\n      firstName: user?.firstName ,\r\n      email: user?.email ,\r\n      password: user?.password ,\r\n      clientType: \"COMPANY\"\r\n    };\r\n    console.log(customer)\r\n  \r\n  // updating DB\r\n  // \"http://localhost:8080/admin/companies\"\r\n   const response = await tokenAxios.put<CompanyModel>( globals.urls.admin+\"companies\",putCompany );\r\n  \r\n   //update global app state\r\n //  store.dispatch(EmployeesUpdatedAction(response.data))\r\n  \r\n  //update local\r\n  //setEmployee(store.getState().EmployeeState.employees.find((c)=>c.id === +props.match.params?.id) );\r\n      \r\n  notify.success(\"company updated!\");\r\n  \r\n  history.push('/companies');\r\n  \r\n  };\r\n  \r\n  \r\n  \r\n    \r\n      return (\r\n        <Box className={classes.box}>\r\n          <Card className={classes.root}>\r\n            <CardContent>\r\n              <Typography  className={classes.pos}>Edit Company</Typography>\r\n              <br />\r\n              <form onSubmit={handleSubmit(send)}> \r\n  \r\n              {/* <TextField\r\n                  id=\"outlined-basic\"\r\n                  label=\"name\"\r\n                  variant=\"outlined\"\r\n                  type=\"text\"\r\n                  name=\"firstName\"\r\n                  {...register(\"firstName\" , {\r\n                    required: {\r\n                      value: true,\r\n                      message: \"your name is required\",\r\n                    },\r\n                    maxLength: {\r\n                      value: 30,\r\n                      message: \"your name can not be greater than 30\",\r\n                    },\r\n                    minLength: {\r\n                      value: 2,\r\n                      message: \"your name can not be less than 2 chars\",\r\n                    },\r\n                  })}\r\n                />\r\n    \r\n                <br />\r\n                <FormHelperText error={true}>{errors.firstName?.message}</FormHelperText>\r\n                <br />\r\n    \r\n    \r\n                <TextField\r\n                  id=\"outlined-basic\"\r\n                  label=\"email\"\r\n                  variant=\"outlined\"\r\n             //     defaultValue={client?.email}\r\n                  type=\"email\"\r\n                  {...register(\"email\", {\r\n                    required: {\r\n                      value: true,\r\n                      message: \"your email is required\",\r\n                    },\r\n                    // pattern: {\r\n                    //   value: /^\\S+@\\S+$/i,\r\n                    //   message: \"your email required\",\r\n                    // },\r\n                  })}\r\n                />\r\n                <br />\r\n                <FormHelperText error={true}>{errors.email?.message}</FormHelperText>\r\n                <br />\r\n                <TextField\r\n                  id=\"outlined-basic\"\r\n                  label=\"password\"\r\n                  variant=\"outlined\"\r\n                 //  defaultValue={client?.email}\r\n                  type=\"password\"\r\n                  {...register(\"password\", {\r\n                    minLength: {\r\n                      value: 5,\r\n                      message: \"your password can not be less than 5 chars\",\r\n                    },\r\n                  })}\r\n                />\r\n                <br />\r\n                <FormHelperText error={true}>{errors.password?.message}</FormHelperText> */}\r\n\r\n                <FormControl variant=\"outlined\"         \r\n                      className={clsx(classes.margin, classes.textField)}>\r\n                <InputLabel>Name</InputLabel>\r\n                <OutlinedInput\r\n                  id=\"outlined-adornment-password\"\r\n                  type=\"text\"\r\n                  {...register(\"firstName\", {\r\n                    required: {\r\n                      value: true,\r\n                      message: \"your name is required\",\r\n                    },\r\n                    maxLength: {\r\n                      value: 30,\r\n                      message: \"your name can not be greater than 30\",\r\n                    },\r\n                    minLength: {\r\n                      value: 2,\r\n                      message: \"your name can not be less than 2 chars\",\r\n                    },\r\n                  })}\r\n                  endAdornment={\r\n                    <InputAdornment position=\"end\">\r\n                      <IconButton\r\n                        aria-label=\"toggle password visibility\"\r\n                        edge=\"end\"\r\n                      ></IconButton>\r\n                    </InputAdornment>\r\n                  }\r\n                  labelWidth={45}\r\n                />\r\n                </FormControl>\r\n\r\n                <FormHelperText error={true}>\r\n                    {errors.firstName?.message}\r\n                    </FormHelperText>\r\n    \r\n                <br />\r\n\r\n                <FormControl variant=\"outlined\"         \r\n                      className={clsx(classes.margin, classes.textField)}\r\n> <InputLabel>Email</InputLabel>\r\n                <OutlinedInput\r\n                  id=\"outlined-adornment-password\"\r\n                  type=\"email\"\r\n                  {...register(\"email\", {\r\n                    minLength: {\r\n                      value: 5,\r\n                      message: \"you must insert email\",\r\n                    },\r\n                  })}\r\n                  endAdornment={\r\n                    <InputAdornment position=\"end\">\r\n                      <IconButton\r\n                        aria-label=\"toggle password visibility\"\r\n                        edge=\"end\"\r\n                      ></IconButton>\r\n                    </InputAdornment>\r\n                  }\r\n                  labelWidth={45}\r\n                />\r\n              </FormControl>\r\n\r\n              <FormHelperText error={true}>\r\n                    {errors.email?.message}\r\n                    </FormHelperText>\r\n\r\n                    <br/>\r\n\r\n                    <FormControl\r\n                className={clsx(classes.margin, classes.textField)}\r\n                variant=\"outlined\"\r\n              >\r\n                <InputLabel htmlFor=\"outlined-adornment-password\">\r\n                  Password\r\n                </InputLabel>\r\n                <OutlinedInput\r\n                  id=\"outlined-adornment-password\"\r\n                  type={values.showPassword ? \"text\" : \"password\"}\r\n                  onChange={handleChange(\"password\")}\r\n                  {...register(\"password\", {\r\n                    minLength: {\r\n                      value: 5,\r\n                      message: \"your password can not be less than 5 chars\",\r\n                    },\r\n                  })}\r\n\r\n                  endAdornment={\r\n                    <InputAdornment position=\"end\"\r\n                    >\r\n                      <IconButton\r\n                        aria-label=\"toggle password visibility\"\r\n                        onClick={handleClickShowPassword}\r\n                        onMouseDown={handleMouseDownPassword}\r\n                        edge=\"end\"\r\n\r\n                      >\r\n                        {values.showPassword ? (\r\n                          <Visibility />\r\n                        ) : (\r\n                          <VisibilityOff />\r\n                        )}\r\n                      </IconButton>\r\n                    </InputAdornment>\r\n                  }\r\n                  labelWidth={70}\r\n                />\r\n              \r\n\r\n              </FormControl>\r\n          \r\n              <FormHelperText error={true}>\r\n                    {errors.password?.message}\r\n                    </FormHelperText>\r\n             \r\n              <br />\r\n\r\n\r\n\r\n                <Button type=\"submit\" variant=\"contained\" color=\"primary\" className={classes.btn}>\r\n                  Edit\r\n                </Button>\r\n              \r\n                <Button onClick={()=>history.push(\"/companies\")}variant=\"contained\" color=\"secondary\" className={classes.btn}>back</Button>\r\n\r\n              \r\n              </form>\r\n              \r\n            </CardContent>\r\n          </Card>\r\n       \r\n        </Box> \r\n      );\r\n}\r\n\r\nexport default EditCompany;\r\n","import { TableRow, TableCell, TextField, Button, Table, TableHead, TableBody, Card, CardActions, CardContent, CardMedia, Collapse, Grid, IconButton, makeStyles, Tooltip, Typography } from \"@material-ui/core\";\r\nimport { useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport tokenAxios from \"../../../Services/interceptor\";\r\nimport notify from \"../../../Services/Notifilcation\";\r\nimport Coupon from \"../../../UserModel/Coupon\";\r\nimport store from \"../../Redux/Store\";\r\nimport \"./CustomerAdvanced.css\";\r\nimport clsx from 'clsx';\r\nimport ContactSupportIcon from '@material-ui/icons/ContactSupport';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport CouponGet from \"../../../UserModel/CouponGet\";\r\nimport globals from \"../../../Services/Globals\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card:{\r\n   marginLeft: theme.spacing(11),\r\n  },\r\n   root: {\r\n     maxWidth: \"200px\",\r\n       margin: theme.spacing(4),\r\n     opacity: 1,\r\n     \"&:hover\":{\r\n         opacity: \"0.5\",\r\n         transition: \"1s\",\r\n         \r\n         }\r\n \r\n   },\r\n   paper:{\r\n       margin: theme.spacing(2),\r\n \r\n   },\r\n   expand: {\r\n    transform: 'rotate(0deg)',\r\n    marginLeft: 'auto',\r\n    transition: theme.transitions.create('transform', {\r\n      duration: theme.transitions.duration.shortest,\r\n    }),\r\n  },\r\n   media: {\r\n     height: \"200px\",\r\n     width: \"200px\",\r\n   },\r\n   tooltip:{\r\n     opacity: \"1\",\r\n   //   margin: theme.spacing(2),\r\n     \"&:hover\":{\r\n       opacity: \"1\",\r\n   }\r\n },\r\n expandOpen: {\r\n  transform: 'rotate(180deg)',\r\n},\r\n }));\r\n\r\nfunction CustomerAdvanced(): JSX.Element {\r\n   \r\n    const [gets, setGet] = useState<CouponGet[]>([]);\r\n    const history = useHistory();\r\n      const cust = useState(store.getState().authState.client);\r\n      const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors },\r\n      } = useForm<any>();\r\n      const classes = useStyles();\r\n      const [expanded, setExpanded] = useState(false);\r\n    \r\n      const handleExpandClick = () => {\r\n        setExpanded(!expanded);\r\n      };\r\n      \r\n\r\n\r\n    \r\n\r\n\r\n      async function send(send: any) {\r\n      \r\n        console.log(\"customer id: \"+cust[0].id);\r\n        console.log(\"prize: \"+send.prize);\r\n     \r\n       \r\ntry{\r\n        const byMax = {\r\n            customerId:cust[0].id,\r\n            prize: send.prize\r\n        }\r\n        // \"http://localhost:8080/customer/coupons/\",\r\n        const response = await tokenAxios.get<CouponGet[]>(\r\n     globals.urls.customers+\"coupons/\",\r\n          {\r\n            params: {\r\n              prize: send.prize,\r\n              customerId:cust[0].id\r\n            \r\n            }\r\n          })\r\n        setGet(response.data);\r\n         if(response.data.length===0){\r\n          notify.error(\"there is no coupons with max price \"+ send.prize+\"!\");\r\n\r\n        } else if(response.data.length>0){\r\n        notify.success(\"found \"+response.data.length+\" coupons!\");\r\n        }\r\n    } catch (err) {\r\n           \r\n        notify.error(\"there is no coupons with max price \"+ send.prize+\"!\");\r\n       \r\n    }\r\n    };\r\n\r\n    //  const result = gets.map((get) => {\r\n    //     return (\r\n         \r\n    //         <TableRow key={get.id}>\r\n    //           <TableCell>{get.id} </TableCell>\r\n    //           <TableCell align=\"right\">{get.category}</TableCell>\r\n    //           <TableCell align=\"right\">{get.title}</TableCell>\r\n    //           <TableCell align=\"right\">{get.description}</TableCell>\r\n    //           <TableCell align=\"right\">{get.startDate}</TableCell>\r\n    //           <TableCell align=\"right\">{get.endDate}</TableCell>\r\n    //           <TableCell align=\"right\">{get.amount}</TableCell>\r\n    //           <TableCell align=\"right\">{get.price}</TableCell>\r\n    //           <TableCell align=\"right\">{get.image}</TableCell>\r\n            \r\n    //         </TableRow>\r\n      \r\n    //     );\r\n    //   });\r\n\r\n    const result = gets.map((coupon) => {\r\n    \r\n      return (\r\n      <div>\r\n      <Grid spacing={5} >\r\n        <Card className={classes.root} >\r\n          \r\n              <CardContent>\r\n                <Typography>{coupon?.id}</Typography>\r\n                <Typography>{coupon?.title}</Typography>\r\n              </CardContent>\r\n              <CardMedia\r\n                className={classes.media}\r\n                // \"http://localhost:8080/client/coupons/images/\" + coupon.imageID\r\n                image={globals.urls.images+ coupon?.imageID}\r\n              \r\n              />\r\n        \r\n              <CardActions>\r\n              <Button aria-label=\"add to favorites\"\r\n           \r\n              >\r\n            \r\n              <DeleteIcon/>\r\n            \r\n            </Button>\r\n    \r\n            {/* <IconButton>\r\n              <ShoppingCartIcon onClick={() => buyCoupon(coupon?.id)} />\r\n            </IconButton> */}\r\n          \r\n            <Tooltip title={coupon?.description} arrow className={classes.tooltip}>\r\n        \r\n          <IconButton>       \r\n               \r\n               <ContactSupportIcon />\r\n   \r\n    </IconButton>\r\n        </Tooltip>\r\n           \r\n              </CardActions>\r\n           \r\n              <CardActions disableSpacing>\r\n              <IconButton aria-label=\"add to favorites\"\r\n              onClick={()=>console.log(coupon.id)}\r\n              >\r\n              <ContactSupportIcon />\r\n          \r\n            </IconButton>\r\n        \r\n            <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n            \r\n            <CardContent>\r\n         \r\n            <Typography paragraph>Method:</Typography>\r\n\r\n            </CardContent>\r\n         \r\n            </Collapse>\r\n      \r\n            <IconButton\r\n         \r\n         className={clsx(classes.expand, {\r\n          \r\n            [classes.expandOpen]: expanded,\r\n          \r\n          })}\r\n          onClick={handleExpandClick}\r\n          aria-expanded={expanded}\r\n          aria-label=\"show more\"\r\n        >\r\n          <ExpandMoreIcon />\r\n        </IconButton>\r\n             \r\n              </CardActions>\r\n         \r\n         \r\n            </Card>\r\n           \r\n            <br/>\r\n            <br/>\r\n          </Grid>\r\n\r\n          </div>\r\n    \r\n    );\r\n \r\n  });\r\n   \r\n      return (\r\n        <>\r\n{gets.length===0?\r\n    <>\r\n                <form onSubmit={handleSubmit(send)}>\r\n              <TextField\r\n                id=\"outlined-basic\"\r\n                label=\"max prise\"\r\n                variant=\"outlined\"\r\n                type=\"number\"\r\n                {...register(\"prize\")}\r\n              />\r\n              <br/>\r\n              <br/>\r\n                <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n              >\r\n                Check out\r\n              </Button>\r\n\r\n              <br/>\r\n              <br/>\r\n              <Button\r\n            onClick={() => history.push(\"/\")}\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n          >\r\n            home\r\n          </Button>\r\n          <br/>\r\n              <br/>\r\n           <Button\r\n            onClick={() => history.goBack()}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n          >\r\n            back\r\n          </Button>\r\n              </form>\r\n              </>\r\n              :\r\n        <>\r\n        {/* <Table className=\"Table\" aria-label=\"simple table\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell>Id</TableCell>\r\n                    <TableCell align=\"right\"> category&nbsp;</TableCell>\r\n                    <TableCell align=\"right\">title&nbsp;</TableCell>\r\n                    <TableCell align=\"right\">description&nbsp;</TableCell>\r\n                    <TableCell align=\"right\">startDate&nbsp;</TableCell>\r\n                    <TableCell align=\"right\">endDate&nbsp;</TableCell>\r\n                    <TableCell align=\"right\">amount&nbsp;</TableCell>\r\n                    <TableCell align=\"right\">price&nbsp;</TableCell>\r\n                    <TableCell align=\"right\">image&nbsp;</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                {gets && result}\r\n                </TableBody>\r\n                </Table> */}\r\n    \r\n\r\n    <Grid container className={classes.card} >\r\n\r\n{gets && result}\r\n\r\n</Grid>\r\n                \r\n              \r\n          <br/>\r\n              <br/>\r\n              <Button\r\n            onClick={() => history.push(\"/\")}\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n          >\r\n            home\r\n          </Button>\r\n          <br/>\r\n              <br/>\r\n           <Button\r\n            onClick={() => history.goBack()}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n          >\r\n            back\r\n          </Button>\r\n          </>\r\n\r\n\r\n}\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nexport default CustomerAdvanced;\r\n","import {\r\n  TableRow,\r\n  TableCell,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Button,\r\n  Table,\r\n  TableHead,\r\n  TableBody,\r\n  makeStyles,\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  CardMedia,\r\n  Collapse,\r\n  Grid,\r\n  IconButton,\r\n  Tooltip,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport tokenAxios from \"../../../Services/interceptor\";\r\nimport notify from \"../../../Services/Notifilcation\";\r\nimport Coupon from \"../../../UserModel/Coupon\";\r\nimport CouponGet from \"../../../UserModel/CouponGet\";\r\nimport store from \"../../Redux/Store\";\r\nimport \"./CustomerCategory.css\";\r\nimport clsx from 'clsx';\r\nimport ContactSupportIcon from '@material-ui/icons/ContactSupport';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport globals from \"../../../Services/Globals\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card:{\r\n   marginLeft: theme.spacing(11),\r\n  },\r\n   root: {\r\n     maxWidth: \"200px\",\r\n       margin: theme.spacing(4),\r\n     opacity: 1,\r\n     \"&:hover\":{\r\n         opacity: \"0.5\",\r\n         transition: \"1s\",\r\n         \r\n         }\r\n \r\n   },\r\n   paper:{\r\n       margin: theme.spacing(2),\r\n \r\n   },\r\n   expand: {\r\n    transform: 'rotate(0deg)',\r\n    marginLeft: 'auto',\r\n    transition: theme.transitions.create('transform', {\r\n      duration: theme.transitions.duration.shortest,\r\n    }),\r\n  },\r\n   media: {\r\n     height: \"200px\",\r\n     width: \"200px\",\r\n   },\r\n   tooltip:{\r\n     opacity: \"1\",\r\n   //   margin: theme.spacing(2),\r\n     \"&:hover\":{\r\n       opacity: \"1\",\r\n   }\r\n },\r\n expandOpen: {\r\n  transform: 'rotate(180deg)',\r\n},\r\n }));\r\n\r\nfunction CustomerCategory(): JSX.Element {\r\n  const [gets, setGet] = useState<CouponGet[]>([]);\r\n  const history = useHistory();\r\n  const cust = useState(store.getState().authState.client);\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm<any>();\r\n  const [open, setOpen] = useState(false);\r\n  const [age, setAge] = useState<string | number>(\"\");\r\n  const classes = useStyles();\r\n  const [expanded, setExpanded] = useState(false);\r\n\r\n  const handleExpandClick = () => {\r\n    setExpanded(!expanded);\r\n  };\r\n  \r\n\r\n  const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n    setAge(event.target.value as number);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  async function send(send: any) {\r\n    console.log(send);\r\n\r\n    const byCategory = {\r\n      customerId: cust[0].id,\r\n      category: send.category,\r\n    };\r\n    // \"http://localhost:8080/customer/coupons/category\",\r\n    const response = await tokenAxios.post<CouponGet[]>(\r\n   globals.urls.customers+\"coupons/category\",\r\n     \r\n      byCategory\r\n   \r\n      );\r\n    setGet(response.data);\r\n    if(response.data.length!==0) {\r\n     \r\n      notify.success(\"found \"+response.data.length+\" coupons\")\r\n\r\n    } else {\r\n     \r\n      notify.error(\"no coupons found in category \"+byCategory.category+\"!\"); \r\n   \r\n    }\r\n  }\r\n\r\n  // const result = gets.map((get) => {\r\n  //   return (\r\n  //     <TableRow key={get.id}>\r\n  //       <TableCell>{get.id} </TableCell>\r\n  //       <TableCell align=\"right\">{get.category}</TableCell>\r\n  //       <TableCell align=\"right\">{get.title}</TableCell>\r\n  //       <TableCell align=\"right\">{get.description}</TableCell>\r\n  //       <TableCell align=\"right\">{get.startDate}</TableCell>\r\n  //       <TableCell align=\"right\">{get.endDate}</TableCell>\r\n  //       <TableCell align=\"right\">{get.amount}</TableCell>\r\n  //       <TableCell align=\"right\">{get.price}</TableCell>\r\n  //       <TableCell align=\"right\">{get.imageID}</TableCell>\r\n  //     </TableRow>\r\n  //   );\r\n  // });\r\n\r\n  const result = gets.map((coupon) => {\r\n    \r\n    return (\r\n    <div key={coupon.id}>\r\n    <Grid spacing={5} >\r\n      <Card className={classes.root} >\r\n        \r\n            <CardContent>\r\n              <Typography>{coupon?.id}</Typography>\r\n              <Typography>{coupon?.title}</Typography>\r\n            </CardContent>\r\n            <CardMedia\r\n              className={classes.media}\r\n              // image={\"http://localhost:8080/client/coupons/images/\" + coupon?.imageID}\r\n              image={globals.urls.images+ coupon?.imageID}\r\n            \r\n            />\r\n      \r\n            <CardActions>\r\n            <Button aria-label=\"add to favorites\"\r\n         \r\n            >\r\n          \r\n            <DeleteIcon />\r\n          \r\n          </Button>\r\n  \r\n          {/* <IconButton>\r\n            <ShoppingCartIcon onClick={() => buyCoupon(coupon?.id)} />\r\n          </IconButton> */}\r\n        \r\n          <Tooltip title={coupon?.description} arrow className={classes.tooltip}>\r\n      \r\n        <IconButton>       \r\n             \r\n             <ContactSupportIcon />\r\n \r\n  </IconButton>\r\n      </Tooltip>\r\n         \r\n            </CardActions>\r\n         \r\n            <CardActions disableSpacing>\r\n            <IconButton aria-label=\"add to favorites\"\r\n            onClick={()=>console.log(coupon.id)}\r\n            >\r\n            <ContactSupportIcon />\r\n        \r\n          </IconButton>\r\n      \r\n          <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n          \r\n          <CardContent>\r\n       \r\n          <Typography paragraph>Method:</Typography>\r\n\r\n          </CardContent>\r\n       \r\n          </Collapse>\r\n    \r\n          <IconButton\r\n       \r\n       className={clsx(classes.expand, {\r\n        \r\n          [classes.expandOpen]: expanded,\r\n        \r\n        })}\r\n        onClick={handleExpandClick}\r\n        aria-expanded={expanded}\r\n        aria-label=\"show more\"\r\n      >\r\n        <ExpandMoreIcon />\r\n      </IconButton>\r\n           \r\n            </CardActions>\r\n       \r\n       \r\n          </Card>\r\n         \r\n          <br/>\r\n          <br/>\r\n        </Grid>\r\n\r\n        </div>\r\n  \r\n  );\r\n\r\n});\r\n\r\n\r\n  return (\r\n    <>\r\n      {gets.length === 0 ? (\r\n        <>\r\n          <form onSubmit={handleSubmit(send)}>\r\n            <FormControl>\r\n              <InputLabel id=\"demo-controlled-open-select-label\">\r\n                category{\" \"}\r\n              </InputLabel>\r\n              <Select\r\n                labelId=\"demo-controlled-open-select-label\"\r\n                id=\"demo-controlled-open-select\"\r\n                defaultValue=\"category\"\r\n                open={open}\r\n                onClose={handleClose}\r\n                onOpen={handleOpen}\r\n                onChange={handleChange}\r\n                {...register(\"category\", {\r\n                  required: { value: true, message: \"Missing User Type\" },\r\n                })}\r\n              >\r\n                <MenuItem value=\"\">\r\n                  <em>Type:</em>\r\n                </MenuItem>\r\n                <MenuItem value=\"FOOD\">FOOD</MenuItem>\r\n                <MenuItem value=\"ELECTRICITY\">ELECTRICITY</MenuItem>\r\n                <MenuItem value=\"RESTAURANT\">RESTAURANT</MenuItem>\r\n                <MenuItem value=\"VACATION\">VACATION</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n\r\n            <br />\r\n            <br />\r\n            <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n              Check out\r\n            </Button>\r\n<br/>\r\n<br/>\r\n            <Button\r\n            onClick={() => history.push(\"/\")}\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n          >\r\n            home\r\n          </Button>\r\n          \r\n          <br/>\r\n          <br/>\r\n\r\n\r\n           <Button\r\n            onClick={() => history.goBack()}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n          >\r\n            back\r\n          </Button>\r\n          </form>\r\n        </>\r\n      ) : (\r\n        <>\r\n          {/* <Table className=\"Table\" aria-label=\"simple table\">\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>Id</TableCell>\r\n                <TableCell align=\"right\"> category&nbsp;</TableCell>\r\n                <TableCell align=\"right\">title&nbsp;</TableCell>\r\n                <TableCell align=\"right\">description&nbsp;</TableCell>\r\n                <TableCell align=\"right\">startDate&nbsp;</TableCell>\r\n                <TableCell align=\"right\">endDate&nbsp;</TableCell>\r\n                <TableCell align=\"right\">amount&nbsp;</TableCell>\r\n                <TableCell align=\"right\">price&nbsp;</TableCell>\r\n                <TableCell align=\"right\">image&nbsp;</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n\r\n            <TableBody>{gets && result}</TableBody>\r\n          </Table> */}\r\n\r\n    \r\n<Grid container className={classes.card} >\r\n\r\n{gets && result}\r\n\r\n</Grid>\r\n\r\n          <br />\r\n          <br />\r\n\r\n          <Button\r\n            onClick={() => history.push(\"/\")}\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n          >\r\n            home\r\n          </Button>\r\n          \r\n           <Button\r\n            onClick={() => history.goBack()}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n          >\r\n            back\r\n          </Button>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CustomerCategory;\r\n","import { Button, makeStyles, withStyles } from \"@material-ui/core\";\r\nimport { purple } from \"@material-ui/core/colors\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport \"./CustomerOptions.css\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    btn: {\r\n        marginLeft: theme.spacing(31),\r\n      },\r\n     \r\n    btn1: {\r\n    marginLeft: theme.spacing(45),\r\n  },\r\n}))\r\nconst ColorButton = withStyles((theme) => ({\r\n    root: {\r\n      color: theme.palette.getContrastText(purple[500]),\r\n      backgroundColor: purple[600],\r\n      opacity: 1,\r\n      transition: \"1s\",\r\n      '&:hover': {\r\n      \r\n        backgroundColor: purple[10],\r\n        // transition: \"2s\",\r\n        color: \"black\",\r\n     },\r\n   \r\n    },\r\n}))(Button);\r\n\r\nfunction CustomerOptions(): JSX.Element {\r\n\r\nconst history = useHistory();\r\nconst classes = useStyles();\r\n\r\n\r\n    return (\r\n        <>\r\n\t\t\t\r\n    \r\n           <br />\r\n           <br />\r\n           <br />\r\n           <br />\r\n           <br />\r\n           <br />\r\n           \r\n          <ColorButton onClick={()=>history.push(\"/customer/advanced\")} className={classes.btn}   variant=\"contained\" color=\"secondary\">\r\n              \r\n              get coupons by  max price\r\n         \r\n          </ColorButton>\r\n    \r\n\r\n     \r\n            \r\n            <ColorButton onClick={()=>history.push(\"/customer/category\")} className={classes.btn}\r\n             color=\"primary\"\r\n               variant=\"contained\"\r\n             >\r\n              \r\n                get coupons by category\r\n           \r\n            </ColorButton>  \r\n            \r\n            \r\n            {/* <ColorButton onClick={()=>history.push(\"/find/customer\")} className={classes.btn}\r\n             color=\"primary\"\r\n               variant=\"contained\"\r\n             >\r\n              \r\n             test\r\n           \r\n            </ColorButton> */}\r\n\r\n\r\n<br/>\r\n<br/>\r\n<br/>\r\n<br/>\r\n<br/>\r\n<br/>\r\n<br/>\r\n<br/>\r\n<br/>\r\n<Button onClick={()=>history.push(\"/\")} className={classes.btn1} color=\"primary\" variant=\"contained\">\r\nhome\r\n</Button>\r\n     \r\n      <Button onClick={()=>history.goBack()}  color=\"secondary\"className={classes.btn1} variant=\"contained\">\r\nback\r\n</Button>\r\n      \r\n      </>\r\n    );\r\n}\r\n\r\nexport default CustomerOptions;\r\n","import { Table, TableHead, TableRow, TableCell, TableBody, TextField, Button } from \"@material-ui/core\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport globals from \"../../../Services/Globals\";\r\nimport tokenAxios from \"../../../Services/interceptor\";\r\nimport notify from \"../../../Services/Notifilcation\";\r\nimport Coupon from \"../../../UserModel/Coupon\";\r\nimport Customer from \"../../../UserModel/Customer\";\r\nimport store from \"../../Redux/Store\";\r\nimport \"./OneCustomer.css\";\r\n\r\n\r\n\r\nfunction OneCustomer(): JSX.Element {\r\n\r\n  const [gets, setGet] = useState<Customer>();\r\n  const history = useHistory();\r\n    const cust = useState(store.getState().authState.client);\r\n    const [coupon, setCoupon] = useState<Coupon[]>(store.getState().couponsState.coupons)\r\n    const {\r\n      register,\r\n      handleSubmit,\r\n      formState: { errors },\r\n    } = useForm<any>();\r\n    // const classes = useStyles();\r\n    const [expanded, setExpanded] = useState(false);\r\n  \r\n    const handleExpandClick = () => {\r\n      setExpanded(!expanded);\r\n    };\r\n    \r\n    // useEffect(() => {\r\n    //     if (!store.getState().authState.client) {\r\n    //       notify.error(\"please login\");\r\n    //       history.push(\"/login\");\r\n    //     }\r\n\r\n        async function send(send: any) {\r\n      \r\n\r\n          // \"http://localhost:8080/admin/customers/\"+send.customerId  \r\n          const response = await tokenAxios.get<Customer>(\r\n            globals.urls.admin+\"customers/\"+send.customerId\r\n      )\r\n          setGet(response.data);\r\n         \r\n      };\r\n\r\n  return (\r\n     \r\n     <>\r\n\r\n\r\n<>\r\n<form onSubmit={handleSubmit(send)}>\r\n              <TextField\r\n                id=\"outlined-basic\"\r\n                label=\"max prise\"\r\n                variant=\"outlined\"\r\n                type=\"number\"\r\n                {...register(\"customerId\")}\r\n              />\r\n              </form>\r\n<Button\r\n              type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n              >\r\n                Check out\r\n              </Button>\r\n</>\r\n\r\n\r\n\r\n     <Table className=\"Table\" aria-label=\"simple table\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Id</TableCell>\r\n                  <TableCell align=\"right\">first name</TableCell>\r\n                  <TableCell align=\"right\"> last name</TableCell>\r\n                  <TableCell align=\"right\">email</TableCell>\r\n                  <TableCell align=\"right\">password</TableCell>\r\n                     \r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody >\r\n       \r\n       <TableRow>\r\n         <TableCell align=\"right\">{gets?.id}</TableCell>\r\n         <TableCell align=\"right\">{gets?.firstName}</TableCell>\r\n         <TableCell align=\"right\">{gets?.lastName}</TableCell>\r\n         <TableCell align=\"right\">{gets?.email}</TableCell>\r\n         <TableCell align=\"right\">{gets?.password}</TableCell>\r\n     \r\n    \r\n       </TableRow>\r\n     </TableBody>    \r\n              </Table>\r\n\r\n            \r\n            \r\n      </>\r\n  );\r\n}\r\n\r\nexport default OneCustomer;\r\n","import { FormControl, TextField, Button, Input, Box, Card, CardContent, Typography, makeStyles, IconButton, InputAdornment, InputLabel, OutlinedInput } from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { SubmitHandler, useForm } from \"react-hook-form\";\r\nimport { useHistory } from \"react-router\";\r\nimport tokenAxios from \"../../../Services/interceptor\";\r\nimport Coupon from \"../../../UserModel/Coupon\";\r\nimport store from \"../../Redux/Store\";\r\nimport \"./AddCoupon.css\";\r\nimport clsx from \"clsx\";\r\nimport notyf from \"notyf/notyf\";\r\nimport notify from \"../../../Services/Notifilcation\";\r\nimport { error } from \"console\";\r\nimport globals from \"../../../Services/Globals\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    minWidth: 275,\r\n  },\r\n\r\n  pos: {\r\n    marginBottom: 0,\r\n    marginLeft: \"30%\",\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n marginLeft: \"25%\"\r\n  },\r\n  box: {\r\n    marginLeft: \"39%\",\r\n    maxWidth: \"50px\",\r\n    marginTop: \"70px\",\r\n  },\r\n  withoutLabel: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  textField: {\r\n    width: \"25ch\",\r\n  },\r\n  btn: {\r\n    marginLeft: theme.spacing(4),\r\n  },\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n    marginLeft: \"20px\",\r\n  },\r\n  stam:{\r\n  \r\n    marginLeft: theme.spacing(8),\r\n\r\n  }\r\n}));\r\n\r\n\r\nfunction AddCoupon(): JSX.Element {\r\n\r\n    const [company,setCompany] = useState(store.getState().authState.client);\r\n    const [coupon,setCoupon] = useState<Coupon>();\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    watch,\r\n      formState: { touchedFields }\r\n  } = useForm<Coupon>({\r\n    mode: \"onTouched\",\r\n  });\r\n  const classes = useStyles();\r\n\r\n\r\n  const history = useHistory();\r\n\r\n\r\n \r\n    useEffect(() => {\r\n\r\n    });\r\n\r\n  \r\n    async function addCoupon(coupon: Coupon) {\r\n        setCompany(store.getState().authState.client);\r\n        // const start = new Date(coupon.startDate);\r\n        // const end = new Date(coupon.endDate);\r\n        \r\n    console.log(coupon);\r\n    try {\r\n    \r\n      const formData = new FormData();\r\n      \r\n      formData.append(\"companyID\", company.id.toString());\r\n      formData.append(\"category\", coupon.category);\r\n      formData.append(\"title\", coupon.title);\r\n      formData.append(\"description\", coupon.description);\r\n      formData.append(\"startDate\", coupon.startDate.toString());\r\n      formData.append(\"endDate\", coupon.endDate.toString());\r\n      formData.append(\"amount\", coupon.amount.toString());\r\n      formData.append(\"price\", coupon.price.toString());\r\n      formData.append(\"image\", coupon.image?.item(0));\r\n\r\n      // \"http://localhost:8080/company/coupon\",\r\n\r\n     const request = await tokenAxios.post<Coupon>(\r\n     globals.urls.company+\"coupon\",\r\n        \r\n        formData\r\n     \r\n        );\r\n\r\n      setCoupon(request.data);\r\n      console.log(request.data);\r\n      history.push(\"/company\");\r\n    } catch (err) {\r\n   \r\n      // notify.error(error.request.message);\r\n    }\r\n  }\r\n\r\n  return (\r\n \r\n    <Box className={classes.box}>\r\n    <div className=\"Login\">\r\n      <Card className={classes.root} square >\r\n        <CardContent>\r\n          <Typography className={classes.pos}>add coupon</Typography>\r\n          <br />\r\n      <form onSubmit={handleSubmit(addCoupon)}>\r\n       \r\n        <>\r\n      \r\n\r\n<FormControl\r\n                variant=\"outlined\"\r\n                className={clsx(classes.margin, classes.textField)}\r\n              >\r\n                {\" \"}\r\n                <InputLabel>category</InputLabel>\r\n                <OutlinedInput\r\n                  id=\"outlined-adornment-password\"\r\n                  type=\"text\"\r\n                  {...register(\"category\", { required: true, })}\r\n              \r\n                  endAdornment={\r\n                    <InputAdornment position=\"end\">\r\n                      <IconButton\r\n                        aria-label=\"toggle password visibility\"\r\n                        edge=\"end\"\r\n                      ></IconButton>\r\n                    </InputAdornment>\r\n                  }\r\n                  labelWidth={45}\r\n                />\r\n              </FormControl>\r\n              \r\n              <FormControl\r\n                variant=\"outlined\"\r\n                className={clsx(classes.margin, classes.textField)}\r\n              >\r\n                {\" \"}\r\n                <InputLabel>title</InputLabel>\r\n                <OutlinedInput\r\n                  id=\"outlined-adornment-password\"\r\n                  type=\"text\"\r\n                  {...register(\"title\", { required: true,  })}\r\n              \r\n                  endAdornment={\r\n                    <InputAdornment position=\"end\">\r\n                      <IconButton\r\n                        aria-label=\"toggle password visibility\"\r\n                        edge=\"end\"\r\n                      ></IconButton>\r\n                    </InputAdornment>\r\n                  }\r\n                  labelWidth={45}\r\n                />\r\n              </FormControl>\r\n              \r\n                <FormControl\r\n                variant=\"outlined\"\r\n                className={clsx(classes.margin, classes.textField)}\r\n              >\r\n                {\" \"}\r\n                <InputLabel>description</InputLabel>\r\n                <OutlinedInput\r\n                  id=\"outlined-adornment-password\"\r\n                  type=\"text\"\r\n                  {...register(\"description\", { required: true, })}\r\n                  endAdornment={\r\n                    <InputAdornment position=\"end\">\r\n                      <IconButton\r\n                        aria-label=\"toggle password visibility\"\r\n                        edge=\"end\"\r\n                      ></IconButton>\r\n                    </InputAdornment>\r\n                  }\r\n                  labelWidth={45}\r\n                />\r\n              </FormControl>     \r\n              \r\n              <FormControl\r\n                variant=\"outlined\"\r\n                className={clsx(classes.margin, classes.textField)}\r\n              >\r\n                {\" \"}\r\n                <InputLabel></InputLabel>\r\n                <OutlinedInput\r\n                  id=\"outlined-adornment-password\"\r\n                  type=\"date\"\r\n                  {...register(\"startDate\",{ required: true, })}\r\n                  endAdornment={\r\n                    <InputAdornment position=\"end\">\r\n                      <IconButton\r\n                        aria-label=\"toggle password visibility\"\r\n                        edge=\"end\"\r\n                      ></IconButton>\r\n                    </InputAdornment>\r\n                  }\r\n                  labelWidth={45}\r\n                />\r\n              </FormControl>\r\n          \r\n         \r\n           <FormControl\r\n                variant=\"outlined\"\r\n                className={clsx(classes.margin, classes.textField)}\r\n              >\r\n                {\" \"}\r\n                <InputLabel></InputLabel>\r\n                <OutlinedInput\r\n                  id=\"outlined-adornment-password\"\r\n                  type=\"date\"\r\n                  {...register(\"endDate\",{ required: true, })}\r\n                  endAdornment={\r\n                    <InputAdornment position=\"end\">\r\n                      <IconButton\r\n                        aria-label=\"toggle password visibility\"\r\n                        edge=\"end\"\r\n                      ></IconButton>\r\n                    </InputAdornment>\r\n                  }\r\n                  labelWidth={45}\r\n                />\r\n              </FormControl>\r\n       \r\n       <FormControl\r\n                variant=\"outlined\"\r\n                className={clsx(classes.margin, classes.textField)}\r\n              >\r\n                {\" \"}\r\n                <InputLabel>amount</InputLabel>\r\n                <OutlinedInput\r\n                  id=\"outlined-adornment-password\"\r\n                  type=\"text\"\r\n                  {...register(\"amount\", { required: true,  })}\r\n                  endAdornment={\r\n                    <InputAdornment position=\"end\">\r\n                      <IconButton\r\n                        aria-label=\"toggle password visibility\"\r\n                        edge=\"end\"\r\n                      ></IconButton>\r\n                    </InputAdornment>\r\n                  }\r\n                  labelWidth={45}\r\n                />\r\n              </FormControl>   \r\n              \r\n              <FormControl\r\n                variant=\"outlined\"\r\n                className={clsx(classes.margin, classes.textField)}\r\n              >\r\n                {\" \"}\r\n                <InputLabel>price</InputLabel>\r\n                <OutlinedInput\r\n                  id=\"outlined-adornment-password\"\r\n                  type=\"text\"\r\n                  {...register(\"price\", { required: true,  })}\r\n                  endAdornment={\r\n                    <InputAdornment position=\"end\">\r\n                      <IconButton\r\n                        aria-label=\"toggle password visibility\"\r\n                        edge=\"end\"\r\n                      ></IconButton>\r\n                    </InputAdornment>\r\n                  }\r\n                  labelWidth={45}\r\n                />\r\n              </FormControl>\r\n              <br />\r\n              <br />\r\n\r\n          <Button\r\n  variant=\"contained\"\r\n  component=\"label\"\r\n  className={classes.stam}\r\n>\r\n  Upload File\r\n  <input\r\n    type=\"file\"\r\n    hidden\r\n    {...register(\"image\", { required: true })}\r\n  />\r\n</Button>\r\n          {/* {errors.image?.type==='minLength' && <span>name is too short</span>} */}\r\n\r\n          <br />\r\n          <br />\r\n          <Button type=\"submit\" color=\"primary\" variant=\"contained\" \r\n                      className={classes.btn}\r\n\r\n          >\r\n            Add\r\n          </Button>\r\n\r\n              <Button\r\n            onClick={() => history.goBack()}\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            className={classes.btn}\r\n          >\r\n            back\r\n          </Button>\r\n        </>\r\n      </form>\r\n      </CardContent>\r\n\r\n       \r\n</Card>\r\n</div>\r\n</Box>\r\n  );\r\n}\r\n\r\nexport default AddCoupon;\r\n\r\n\r\n","import \"./CompanyOptions.css\";\nimport { Button, makeStyles, withStyles } from \"@material-ui/core\";\nimport { purple } from \"@material-ui/core/colors\";\nimport { useHistory } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n    btn: {\n        marginLeft: theme.spacing(31),\n      },\n     \n    btn1: {\n    marginLeft: theme.spacing(45),\n  },\n}))\nconst ColorButton = withStyles((theme) => ({\n    root: {\n      color: theme.palette.getContrastText(purple[500]),\n      backgroundColor: purple[600],\n      opacity: 1,\n      transition: \"1s\",\n      '&:hover': {\n      \n        backgroundColor: purple[10],\n        // transition: \"2s\",\n        color: \"black\",\n     },\n   \n    },\n}))(Button);\n\nfunction CompanyOptions(): JSX.Element {\n    const history = useHistory();\n    const classes = useStyles();\n    \n    \n        return (\n            <>\n                \n        \n               <br />\n               <br />\n               <br />\n               <br />\n               <br />\n               <br />\n               \n              <ColorButton onClick={()=>history.push(\"/company/advanced\")} className={classes.btn}   variant=\"contained\" color=\"secondary\">\n                  \n                  get coupons by  max price\n             \n              </ColorButton>\n        \n    \n         \n                \n                <ColorButton onClick={()=>history.push(\"/company/category\")} className={classes.btn}\n                 color=\"primary\"\n                   variant=\"contained\"\n                 >\n                  \n                    get coupons by category\n               \n                </ColorButton>  \n                \n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<ColorButton onClick={()=>history.push(\"/add/coupon\")} className={classes.btn}   variant=\"contained\" color=\"secondary\">\n                  \n              add coupon\n             \n              </ColorButton>\n\n                \n                {/* <ColorButton onClick={()=>history.push(\"/find/customer\")} className={classes.btn}\n                 color=\"primary\"\n                   variant=\"contained\"\n                 >\n                  \n                 test\n               \n                </ColorButton> */}\n    \n    \n    <br/>\n    <br/>\n    <br/>\n    <br/>\n    <br/>\n    <br/>\n    <br/>\n    <br/>\n    <br/>\n    <Button onClick={()=>history.push(\"/\")} className={classes.btn1} color=\"primary\" variant=\"contained\">\n    home\n    </Button>\n         \n          <Button onClick={()=>history.goBack()}  color=\"secondary\"className={classes.btn1} variant=\"contained\">\n    back\n    </Button>\n          \n          </>\n        );\n    }\n\nexport default CompanyOptions;\n","import { TextField, Button } from \"@material-ui/core\";\nimport { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { RouteComponentProps, useHistory } from \"react-router-dom\";\nimport globals from \"../../../Services/Globals\";\nimport tokenAxios from \"../../../Services/interceptor\";\nimport CouponGet from \"../../../UserModel/CouponGet\";\nimport UserModel from \"../../../UserModel/UserModel\";\nimport store from \"../../Redux/Store\";\nimport \"./EditCoupon.css\";\n\ninterface RouteParam {\n    id: string;\n  }\n  \n  interface EditDetailsProps extends RouteComponentProps<RouteParam> {}\n  \n\n\nfunction EditCoupon(props: EditDetailsProps): JSX.Element {\n    const {\n        register,\n        handleSubmit,\n        formState: { errors },\n      } = useForm<CouponGet>({});\n      const history = useHistory();\n      const currentId = +props.match.params?.id;\n      const company = useState(store.getState().authState.client);\n      const [couponToUpdate,setCouponToUpdate]= useState(store.getState().couponsGetState.coupons);\n\n\n\nasync function updateCoupon(coupon: CouponGet){\n    console.log(coupon);\nconst couponImage = couponToUpdate.find((c)=>c.id === currentId) \nconsole.log(\"image id: \"+couponImage.companyID)\n    coupon.id = currentId;\n    const couponUpdate = {\n        id: coupon?.id,\n        companyID: company[0].id,\n        category: coupon?.category,\n        title: coupon?.title,\n        description: coupon?.description,\n        startDate: coupon?.startDate,\n        endDate: coupon?.endDate,\n        amount: coupon?.amount,\n        price: coupon?.price,\n        imageID: couponImage.imageID,\n      };\n\n    //   \"5470469b-a60f-4721-a5b7-b457f0f8e8ea\"\n      // updating DB\n      // \"http://localhost:8080/company/coupon/\"\n    const response = await tokenAxios.put<any>(\n   globals.urls.company+\"coupon/\"+currentId,\n      couponUpdate\n    );\n    history.push(\"/company\")\n}\n\n    return (\n      \n              <form onSubmit={handleSubmit(updateCoupon)}>\n       \n       <>\n     \n\n         {/* {errors.companyID?.type==='minLength' && <span>name is too short</span>} */}\n\n{/* \n         <input className=\"form-control\" type=\"number\" name=\"companyID\" \n                   defaultValue={company.id}\n                       {...register(\"companyID\")}/> */}\n\n         <br />\n\n         <TextField\n           id=\"outlined-basic\"\n           label=\"category\"\n           variant=\"outlined\"\n           type=\"text\"\n           {...register(\"category\", { required: true, })}\n         />\n\n         {/* {errors.category?.type==='minLength' && <span>name is too short</span>} */}\n\n         <br />\n\n         <TextField\n           id=\"outlined-basic\"\n           label=\"title\"\n           variant=\"outlined\"\n           type=\"text\"\n           {...register(\"title\", { required: true,  })}\n         />\n\n         {/* {errors.title?.type==='minLength' && <span>name is too short</span>} */}\n\n         <br />\n\n         <TextField\n           id=\"outlined-basic\"\n           label=\"description\"\n           variant=\"outlined\"\n           type=\"text\"\n           {...register(\"description\", { required: true, })}\n         />\n\n         {/* {errors.description?.type==='minLength' && <span>name is too short</span>} */}\n\n         <br />\n\n     \n         <input\n           id=\"outlined-basic\"\n           // label=\"start date\"\n           // variant=\"outlined\"\n           type=\"date\"\n           name=\"startDate\"\n           {...register(\"startDate\",{ required: true, })}\n        \n        />     \n           <br />\n       \n          <input\n           id=\"outlined-basic\"\n           // label=\"end date\"\n           // variant=\"outlined\"\n           type=\"date\"\n           name=\"endDate\"\n           {...register(\"endDate\",{ required: true, })}\n       \n       />   \n         \n         <br />\n\n\n         <TextField\n           id=\"outlined-basic\"\n           label=\"amount\"\n           variant=\"outlined\"\n           type=\"text\"\n           {...register(\"amount\", { required: true,  })}\n         />\n\n         <br />\n         {/* {errors.amount?.type==='minLength' && <span>name is too short</span>} */}\n\n         <TextField\n           id=\"outlined-basic\"\n           label=\"price\"\n           variant=\"outlined\"\n           type=\"text\"\n           {...register(\"price\", { required: true,  })}\n         />\n\n         {/* {errors.price?.type==='minLength' && <span>name is too short</span>} */}\n\n         <br />\n\n       \n         {/* {errors.image?.type==='minLength' && <span>name is too short</span>} */}\n\n         <br />\n         <Button type=\"submit\" color=\"primary\" variant=\"contained\" >\n           Add\n         </Button>\n       </>\n     </form>\n  \n  \n    );\n}\n\nexport default EditCoupon;\n","import \"./RegisterCompany.css\";\nimport {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  FormControl,\n  FormHelperText,\n  IconButton,\n  InputAdornment,\n  InputLabel,\n  makeStyles,\n  MenuItem,\n  OutlinedInput,\n  Select,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport axios from \"axios\";\nimport clsx from \"clsx\";\n\nimport { useForm } from \"react-hook-form\";\nimport { useHistory } from \"react-router-dom\";\nimport notify from \"../../../Services/Notifilcation\";\nimport UserModel from \"../../../UserModel/UserModel\";\nimport { EmployeesAddedAction } from \"../../Redux/EmployeesSatate\";\nimport { Alert } from \"@material-ui/lab\";\nimport Papering from \"../../HomeArea/Papering/Papering\";\nimport { useState } from \"react\";\nimport UserAuthModel from \"../../../UserModel/UserAuthModel\";\nimport store from \"../../Redux/Store\";\nimport { registerAction } from \"../../Redux/AuthState\";\nimport CompanyModel from \"../../../UserModel/CompanyModel\";\nimport tokenAxios from \"../../../Services/interceptor\";\nimport React from \"react\";\nimport { Visibility, VisibilityOff } from \"@material-ui/icons\";\nimport globals from \"../../../Services/Globals\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      minWidth: 275,\n    },\n  \n    pos: {\n      marginBottom: 0,\n      marginLeft: \"27%\",\n    },\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: 120,\n    },\n    box: {\n      marginLeft: \"39%\",\n      maxWidth: \"50px\",\n      marginTop: \"70px\",\n    },\n    margin: {\n      margin: theme.spacing(1),\n      marginLeft: \"20px\",\n    },\n    withoutLabel: {\n      marginTop: theme.spacing(3),\n    },\n    textField: {\n      width: \"25ch\",\n    },\n    btn: {\n      marginLeft: theme.spacing(4),\n    },\n  }));\n\nfunction RegisterCompany(): JSX.Element {\n    const {\n        register,\n        handleSubmit,\n        formState: { errors },\n      } = useForm<CompanyModel>();\n      const history = useHistory();\n      const classes = useStyles();\n      const [age, setAge] = useState<string | number>(\"\");\n      const [open, setOpen] = useState(false);\n    \n      const [values, setValues] = React.useState({\n        showPassword: false,\n      });\n    \n      const handleChange = (prop) => (event) => {\n        setValues({ ...values, [prop]: event.target.value });\n      };\n    \n      const handleClickShowPassword = () => {\n        setValues({ ...values, showPassword: !values.showPassword });\n      };\n    \n      const handleMouseDownPassword = (event) => {\n        event.preventDefault();\n      };\n    \n      //   const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n      //     setAge(event.target.value as number);\n      //   };\n    \n      const handleClose = () => {\n        setOpen(false);\n      };\n    \n      const handleOpen = () => {\n        setOpen(true);\n      };\n    \n      async function send(company: CompanyModel) {\n        console.log(company);\n        const addCompany = {\n          firstName: company.firstName,\n          email: company.email,\n          password: company.password,\n          clientType: \"COMPANY\",\n        };\n    \n        try {\n          // \"http://localhost:8080/company/register\",\n\n          const response = await axios.post<CompanyModel>(\n            globals.urls.company+\"register\",\n            addCompany\n          );\n    \n          store.dispatch(registerAction(response.data));\n    \n          notify.success(\"company added successfully!\");\n          history.push(\"/companies\");\n        } catch (err) {\n          notify.error(\"something went wrong!\");\n        }\n      }\n    \n      return (\n        <Box className={classes.box}>\n          <div>\n            <Card className={classes.root}>\n              <CardContent>\n                <Typography className={classes.pos}>Add company</Typography>\n    \n                <form onSubmit={handleSubmit(send)}>\n                  {/* <TextField\n                    className={classes.textField}\n                    id=\"outlined-basic\"\n                    label=\"name\"\n                    variant=\"outlined\"\n                    type=\"text\"\n                    {...register(\"firstName\", {\n                      required: {\n                        value: true,\n                        message: \"your name is required\",\n                      },\n                      maxLength: {\n                        value: 30,\n                        message: \"your name can not be greater than 30\",\n                      },\n                      minLength: {\n                        value: 2,\n                        message: \"your name can not be less than 2 chars\",\n                      },\n                    })}\n                  />\n    \n                  <br />\n    \n                  <FormHelperText error={true}>\n                    {errors.firstName?.message}\n                  </FormHelperText>\n    \n                  <br />\n    \n                  <TextField\n                    id=\"outlined-basic\"\n                    label=\"email\"\n                    variant=\"outlined\"\n                    type=\"email\"\n                    {...register(\"email\", {\n                      minLength: {\n                        value: 5,\n                        message: \"you must insert email\",\n                      },\n                    })}\n                  />\n    \n                  <FormHelperText error={true}>\n                    {errors.email?.message}\n                  </FormHelperText>\n                  <br /> */}\n                  {/* <TextField\n                        id=\"outlined-basic\"\n                        label=\"password\"\n                        variant=\"outlined\"\n                        type=\"password\"\n                        {...register(\"password\", {\n                          minLength: {\n                            value: 5,\n                            message: \"your password can not be less than 5 chars\",\n                          },\n                        })}\n                      />\n                      <br />\n                      <FormHelperText error={true}>\n                        {errors.password?.message}\n                      </FormHelperText>\n    \n                       */}\n    \n                  <br />\n                  <FormControl\n                    variant=\"outlined\"\n                    className={clsx(classes.margin, classes.textField)}\n                  >\n                    {\" \"}\n                    <InputLabel>Name</InputLabel>\n                    <OutlinedInput\n                      id=\"outlined-adornment-password\"\n                      type=\"text\"\n                      {...register(\"firstName\", {\n                        required: {\n                          value: true,\n                          message: \"your name is required\",\n                        },\n                        maxLength: {\n                          value: 30,\n                          message: \"your name can not be greater than 30\",\n                        },\n                        minLength: {\n                          value: 2,\n                          message: \"your name can not be less than 2 chars\",\n                        },\n                      })}\n                      endAdornment={\n                        <InputAdornment position=\"end\">\n                          <IconButton\n                            aria-label=\"toggle password visibility\"\n                            edge=\"end\"\n                          ></IconButton>\n                        </InputAdornment>\n                      }\n                      labelWidth={45}\n                    />\n                  </FormControl>\n    \n                  <FormHelperText error={true}>\n                    {errors.firstName?.message}\n                  </FormHelperText>\n    \n                  <br />\n    \n                  <FormControl\n                    variant=\"outlined\"\n                    className={clsx(classes.margin, classes.textField)}\n                  >\n                    {\" \"}\n                    <InputLabel>Email</InputLabel>\n                    <OutlinedInput\n                      id=\"outlined-adornment-password\"\n                      type=\"email\"\n                      {...register(\"email\", {\n                        minLength: {\n                          value: 5,\n                          message: \"you must insert email\",\n                        },\n                      })}\n                      endAdornment={\n                        <InputAdornment position=\"end\">\n                          <IconButton\n                            aria-label=\"toggle password visibility\"\n                            edge=\"end\"\n                          ></IconButton>\n                        </InputAdornment>\n                      }\n                      labelWidth={45}\n                    />\n                  </FormControl>\n    \n                  <FormHelperText error={true}>\n                    {errors.email?.message}\n                  </FormHelperText>\n    \n                  <br />\n    \n                  <FormControl\n                    className={clsx(classes.margin, classes.textField)}\n                    variant=\"outlined\"\n                  >\n                    <InputLabel htmlFor=\"outlined-adornment-password\">\n                      Password\n                    </InputLabel>\n                    <OutlinedInput\n                      id=\"outlined-adornment-password\"\n                      type={values.showPassword ? \"text\" : \"password\"}\n                      onChange={handleChange(\"password\")}\n                      {...register(\"password\", {\n                        minLength: {\n                          value: 5,\n                          message: \"your password can not be less than 5 chars\",\n                        },\n                      })}\n                      endAdornment={\n                        <InputAdornment position=\"end\">\n                          <IconButton\n                            aria-label=\"toggle password visibility\"\n                            onClick={handleClickShowPassword}\n                            onMouseDown={handleMouseDownPassword}\n                            edge=\"end\"\n                          >\n                            {values.showPassword ? (\n                              <Visibility />\n                            ) : (\n                              <VisibilityOff />\n                            )}\n                          </IconButton>\n                        </InputAdornment>\n                      }\n                      labelWidth={70}\n                    />\n                  </FormControl>\n    \n                  <FormHelperText error={true}>\n                    {errors.password?.message}\n                  </FormHelperText>\n    \n                  <br />\n    \n                  <Button\n                    className={classes.btn}\n                    type=\"submit\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                  >\n                    add\n                  </Button>\n    \n                  <Button\n                    onClick={() => history.goBack()}\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    className={classes.btn}\n                  >\n                    back\n                  </Button>\n                </form>\n              </CardContent>\n        \n              {/* <Button onClick={()=>history.push(\"/find/customer\")} className={classes.btn}\n                 color=\"primary\"\n                   variant=\"contained\"\n                 >\n                  \n                 test\n               \n                </Button> */}\n    \n              <br />\n            </Card>\n          </div>\n        </Box>\n      );\n    }\n\nexport default RegisterCompany;\n","import { makeStyles } from \"@material-ui/styles\";\nimport { PayPalButtons, PayPalScriptProvider } from \"@paypal/react-paypal-js\";\nimport \"./Paypal.css\";\nimport clsx from \"clsx\";\nimport { Button, Theme } from \"@material-ui/core\";\nimport { useHistory } from \"react-router-dom\";\n\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    paypal:{\n         marginLeft: theme.spacing(27),\n         marginTop: theme.spacing(20),\n    }\n}))\n\nfunction Paypal(): JSX.Element {\n    const history = useHistory();\n    const classes = useStyles();\n// () => {\n//     return ;\n// }\n    return (\n    \n    <div className={classes.paypal}>\n     <PayPalScriptProvider options={{ \"client-id\": \"test\" }}>\n     <PayPalButtons style={{ layout: \"horizontal\" }} />      \n       </PayPalScriptProvider>\n\n       <br/>\n       <br/>\n\n<Button onClick={()=> history.push(\"/\")} variant=\"contained\" color=\"primary\" className={classes.paypal}>\n    home\n</Button>\n\n<Button onClick={()=> history.goBack()} variant=\"contained\" color=\"secondary\" className={classes.paypal}>\nback</Button>\n\n        </div>\n  \n  );\n}\n\nexport default Paypal;\n","import { Redirect, Route, Switch } from \"react-router-dom\";\r\nimport Login from \"../../AuthArea/Login/Login\";\r\nimport Logout from \"../../AuthArea/Logout/Logout\";\r\nimport Register from \"../../AuthArea/Register/Register\";\r\nimport Layout from \"../../EmployeeArea/Layout/Layout\";\r\nimport Cards from \"../Cards/Cards\";\r\nimport Papering from \"../Papering/Papering\";\r\nimport \"./Routing.css\";\r\nimport Information from \"../Information/Information\";\r\nimport AddCustomer from \"../../EmployeeArea/AddCustomer/AddCustomer\";\r\nimport EditCustomer from \"../../EmployeeArea/EditCustomer/EditCustomer\";\r\nimport AllCompanies from \"../../EmployeeArea/AllCompanies/AllCompanies\";\r\nimport CompanyPlace from \"../../CompanyArea/CompanyPlace/CompanyPlace\";\r\nimport CustomerCoupons from \"../../CustomerArea/CustomerCoupons/CustomerCoupons\";\r\nimport CustomerDetails from \"../../CustomerArea/CustomerDetails/CustomerDetails\";\r\nimport CompanyDetails from \"../../CompanyArea/CompanyDetails/CompanyDetails\";\r\nimport CompanyAdvanced from \"../../CompanyArea/CompanyAdvanced/CompanyAdvanced\";\r\nimport CouponsCategory from \"../../CompanyArea/CouponsCategory/CouponsCategory\";\r\nimport Coupons from \"../Coupons/Coupons\";\r\nimport AddCompany from \"../../EmployeeArea/AddCompany/AddCompany\";\r\nimport EditCompany from \"../../EmployeeArea/EditCompany/EditCompany\";\r\nimport CustomerAdvanced from \"../../CustomerArea/CustomerAdvanced/CustomerAdvanced\";\r\nimport CustomerCategory from \"../../CustomerArea/CustomerCategory/CustomerCategory\";\r\nimport CustomerOptions from \"../../CustomerArea/CustomerOptions/CustomerOptions\";\r\nimport OneCustomer from \"../../EmployeeArea/OneCustomer/OneCustomer\";\r\nimport AddCoupon from \"../../CompanyArea/AddCoupon/AddCoupon\";\r\nimport CompanyOptions from \"../../CompanyArea/CompanyOptions/CompanyOptions\";\r\nimport EditCoupon from \"../../CompanyArea/EditCoupon/EditCoupon\";\r\nimport RegisterCompany from \"../../AuthArea/RegisterCompany/RegisterCompany\";\r\nimport Paypal from \"../Paypal/Paypal\";\r\n\r\nfunction Routing(): JSX.Element {\r\n  return (\r\n    <div className=\"Routing\">\r\n      <Switch>\r\n        <Route path=\"/home\" component={Cards} exact />\r\n        <Route path=\"/register\" component={Register} exact />\r\n        <Route path=\"/register/company\" component={RegisterCompany} exact />\r\n        <Route path=\"/login\" component={Login} exact />\r\n        <Route path=\"/logout\" component={Logout} exact />\r\n        <Route path=\"/coupons\" component={Coupons} exact />\r\n        <Route path=\"/employee\" component={Papering} exact />\r\n        <Route path=\"/customer\" component={AddCustomer} exact />\r\n        <Route path=\"/editcust/:id\" component={EditCustomer} exact />\r\n        <Route path=\"/editcomp/:id\" component={EditCompany} exact />\r\n        <Route path=\"/coupon/:id\" component={EditCoupon} exact />\r\n        <Route path=\"/customers\" component={Layout} exact />\r\n        <Route path=\"/companies\" component={AllCompanies} exact />\r\n        <Route path=\"/company\" component={CompanyPlace} exact />\r\n        <Route path=\"/more\" component={Information} exact />\r\n        <Route path=\"/area\" component={CustomerCoupons} exact />\r\n        <Route path=\"/customer/details\" component={CustomerDetails} exact />\r\n        <Route path=\"/company/details\" component={CompanyDetails} exact />\r\n        <Route path=\"/company/advanced\" component={CompanyAdvanced} exact />\r\n        <Route path=\"/customer/advanced\" component={CustomerAdvanced} exact />\r\n        <Route path=\"/company/category\" component={CouponsCategory} exact />\r\n        <Route path=\"/customer/category\" component={CustomerCategory} exact />\r\n        <Route path=\"/customer/options\" component={CustomerOptions} exact />\r\n        <Route path=\"/add/company\" component={AddCompany} exact />\r\n        <Route path=\"/find/customer\" component={OneCustomer} exact />\r\n        <Route path=\"/add/coupon\" component={AddCoupon} exact />\r\n        <Route path=\"/company/options\" component={CompanyOptions} exact />\r\n        <Route path=\"/payment/paypal\" component={Paypal} exact />\r\n        <Redirect from=\"/\" to=\"/home\" exact />\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Routing;\r\n","import React, { useEffect, useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Button from '@material-ui/core/Button';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport { BrowserRouter as Router, useHistory } from 'react-router-dom';\r\nimport AccountBoxIcon from '@material-ui/icons/AccountBox';\r\nimport ShopIcon from '@material-ui/icons/Shop';\r\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\r\nimport store from '../../Redux/Store';\r\nimport ClientType from '../../../UserModel/clientTypeModel';\r\n\r\nconst useStyles = makeStyles({\r\n  list: {\r\n    width: 250,\r\n  },\r\n  fullList: {\r\n    width: 'auto',\r\n  },\r\n  btn:{\r\n    textTransform: 'lowercase'\r\n   \r\n  },\r\n});\r\n\r\ntype Anchor = 'top' | 'left' | 'bottom' | 'right';\r\n\r\nexport default function SideBar({children}) {\r\n  const classes = useStyles();\r\n  const [state, setState] = React.useState({\r\n\r\n    left: false,\r\n  \r\n  });\r\n\r\n  const toggleDrawer = (anchor: Anchor, open: boolean) => (\r\n    event: React.KeyboardEvent | React.MouseEvent,\r\n  ) => {\r\n    if (\r\n      event.type === 'keydown' &&\r\n      ((event as React.KeyboardEvent).key === 'Tab' ||\r\n        (event as React.KeyboardEvent).key === 'Shift')\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    setState({ ...state, [anchor]: open });\r\n  };\r\n  const history = useHistory();\r\n\r\n  const[client, setClient] = useState(store.getState().authState.client);\r\n\r\n  useEffect(()=> {\r\n    console.log(client);\r\n        const unsubscribe = store.subscribe(() => {\r\n        setClient(store.getState().authState.client)\r\n      return unsubscribe;\r\n     })\r\n  });\r\n\r\n  const list = (anchor: Anchor) => (\r\n   \r\n    <div\r\n      className={clsx(classes.list, {\r\n        [classes.fullList]: anchor === 'top' || anchor === 'bottom',\r\n      })}\r\n      role=\"presentation\"\r\n      onClick={toggleDrawer(anchor, false)}\r\n      onKeyDown={toggleDrawer(anchor, false)}\r\n     >\r\n         <Router >\r\n        <br/>\r\n    \r\n   \r\n      <List>\r\n     \r\n        \r\n       \r\n          <ListItem button={true} >\r\n        {client?.clientType===ClientType.admin ?\r\n         <Button onClick={()=> history.push(\"/customer\")} className={classes.btn}>\r\n         <ListItemIcon> <MailIcon /></ListItemIcon>\r\n       <ListItemText primary='add customer'/>\r\n         </Button>\r\n       :client?.clientType===ClientType.customer?\r\n       <Button onClick={()=> history.push(\"/area\")} className={classes.btn}>\r\n       <ListItemIcon> <ShopIcon /></ListItemIcon>\r\n     <ListItemText primary='my coupons'/>\r\n       </Button>\r\n       : client?.clientType===ClientType.company?\r\n       <Button onClick={()=> history.push(\"/company\")} className={classes.btn}>\r\n       <ListItemIcon> <AccountBoxIcon /></ListItemIcon>\r\n     <ListItemText primary='your area'/>\r\n       </Button>\r\n       :\r\n       <Button onClick={()=> history.push(\"/login\")} className={classes.btn}>\r\n       <ListItemIcon> <AccountBoxIcon /></ListItemIcon>\r\n     <ListItemText primary='please login'/>\r\n       </Button>\r\n      }\r\n       \r\n        </ListItem>\r\n\r\n      </List>\r\n   <Divider variant=\"middle\" light={true} />\r\n    \r\n      <List>\r\n\r\n     \r\n     <ListItem button={true} >\r\n   {client?.clientType===ClientType.admin ?\r\n    <Button onClick={()=> history.push(\"/customers\")} className={classes.btn}>\r\n    <ListItemIcon> <MailIcon /></ListItemIcon>\r\n  <ListItemText primary='All customers'/>\r\n    </Button>\r\n    :client?.clientType===ClientType.customer?\r\n    <Button onClick={()=> history.push(\"/customer/details\")} className={classes.btn}>\r\n    <ListItemIcon> <AccountBoxIcon /></ListItemIcon>\r\n  <ListItemText primary='my details'/>\r\n    </Button>\r\n    : client?.clientType===ClientType.company?\r\n    <Button onClick={()=> history.push(\"/company/details\")} className={classes.btn}>\r\n    <ListItemIcon> <AccountBoxIcon /></ListItemIcon>\r\n  <ListItemText primary='my details'/>\r\n    </Button>\r\n    :\r\n    <Button onClick={()=> history.push(\"/coupons\")} className={classes.btn}>\r\n    <ListItemIcon> <AccountBoxIcon /></ListItemIcon>\r\n  <ListItemText primary='coupons'/>\r\n    </Button>\r\n   }\r\n   \r\n    \r\n    \r\n    \r\n    \r\n     </ListItem>\r\n\r\n </List>\r\n\r\n      \r\n      <Divider variant=\"middle\" light={true} />\r\n      \r\n      <List>\r\n\r\n      <ListItem button={true} >\r\n        {client?.clientType===ClientType.admin ?\r\n         <Button onClick={()=> history.push(\"/companies\")} className={classes.btn}>\r\n         <ListItemIcon> <MailIcon /></ListItemIcon>\r\n       <ListItemText primary='All companies'/>\r\n         </Button>\r\n      :client?.clientType===ClientType.customer?\r\n      <Button onClick={()=> history.push(\"/coupons\")} className={classes.btn}>\r\n      <ListItemIcon> <ShoppingCartIcon /></ListItemIcon>\r\n    <ListItemText primary='buy coupon'/>\r\n      </Button>\r\n      : client?.clientType===ClientType.company?\r\n      <Button onClick={()=> history.push(\"/company/options\")} className={classes.btn}>\r\n      <ListItemIcon> <AccountBoxIcon /></ListItemIcon>\r\n    <ListItemText primary='options'/>\r\n      </Button>\r\n      :\r\n      <Button onClick={()=> history.push(\"/register/company\")} className={classes.btn}>\r\n      <ListItemIcon> <AccountBoxIcon /></ListItemIcon>\r\n    <ListItemText primary='register company'/>\r\n      </Button>\r\n     }\r\n                  </ListItem>\r\n      </List>\r\n      <Divider variant=\"middle\" light={true} />\r\n      \r\n      <List>\r\n\r\n      <ListItem button={true} >\r\n        {client?.clientType===ClientType.admin ?\r\n         <Button onClick={()=> history.push(\"/add/company\")} className={classes.btn}>\r\n         <ListItemIcon> <MailIcon /></ListItemIcon>\r\n       <ListItemText primary='add company'/>\r\n         </Button>\r\n      :client?.clientType===ClientType.customer?\r\n      <Button onClick={()=> history.push(\"/customer/options\")} className={classes.btn}>\r\n      <ListItemIcon> <AccountBoxIcon /></ListItemIcon>\r\n    <ListItemText primary='options'/>\r\n      </Button>\r\n      : \r\n      <Button onClick={()=> history.push(\"/more\")} className={classes.btn}>\r\n      <ListItemIcon> <AccountBoxIcon /></ListItemIcon>\r\n    <ListItemText primary='more...'/>\r\n      </Button>\r\n     }\r\n                  </ListItem>\r\n      </List>\r\n      {/* <Divider variant=\"middle\" light={true} />\r\n      <List>\r\n      <ListItem button key='WorkIcon'>\r\n            <ListItemIcon> <MailIcon /></ListItemIcon>\r\n            <ListItemText primary='add employee' />\r\n          </ListItem>\r\n      </List>\r\n      <Divider variant=\"middle\" light={true} />\r\n      <List>\r\n      <ListItem button key='WorkIcon'>\r\n            <ListItemIcon> <MailIcon /></ListItemIcon>\r\n            <ListItemText primary='add employee' />\r\n          </ListItem> */}\r\n      {/* </List> */}\r\n      {/* <Switch>\r\n            <Route path=\"/home\" exact/>\r\n            <Route path=\"/employee\" exact>\r\n           {AddEmployee} \r\n            </Route>\r\n            <Route path=\"/employees\" component={Layout} exact/> \r\n           <Redirect from=\"/\" to=\"/home\" exact/>\r\n            </Switch>\r\n      */}\r\n      </Router>\r\n    \r\n    </div>\r\n\r\n  );\r\n\r\n  return (\r\n    <div>\r\n   \r\n        <React.Fragment key={'left'}>\r\n          <Button onClick={toggleDrawer('left', true)}>{children}</Button>\r\n          <Drawer anchor={'left'} open={state['left']} onClose={toggleDrawer('left', false)}>\r\n            {list('left')}\r\n          </Drawer>\r\n        </React.Fragment>\r\n       \r\n    </div>\r\n    \r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Badge, Button, Container, createMuiTheme, createTheme, CssBaseline, Divider, IconButton, makeStyles, Switch, ThemeProvider, Toolbar, Typography } from \"@material-ui/core\";\r\nimport Header from \"./Components/HomeArea/Header/Header\";\r\nimport { BrowserRouter, NavLink, useHistory } from \"react-router-dom\";\r\nimport Routing from \"./Components/HomeArea/Routing/Routing\";\r\nimport { useSpring, animated, config } from \"react-spring\";\r\nimport SideBar from \"./Components/HomeArea/SideBar/SideBar\";\r\nimport store from \"./Components/Redux/Store\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\r\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\r\nimport Brightness7Icon from '@material-ui/icons/Brightness7';\r\nimport Brightness2Icon from '@material-ui/icons/Brightness2';\r\nimport {  HashRouter } from \"react-router-dom\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  title: {\r\n    flexGrow: 1,\r\n   textDecoration: \"none\",\r\n  },\r\n  link:{\r\n    textDecoration: \"none\",\r\n\r\n  },\r\n \r\n  tagline: {\r\n    fontSize: 20,\r\n    textTransform: \"uppercase\",\r\n    justifyContent: \"center\",\r\n    fontFamily: \"Montserrat\",\r\n  },\r\n}));\r\n\r\nfunction App() {\r\n  const [darkMode, setDarkMode] = useState(false);\r\n  const [client, setClient] = useState(store.getState().authState.client);\r\n const classes = useStyles();\r\n  const history = useHistory();\r\n  \r\n  const props = useSpring({\r\n    to: { opacity: 1 },\r\n    from: { opacity: 0 },\r\n    reset: true,\r\n    delay: 200,\r\n    config: config.gentle,\r\n  });\r\n\r\n  \r\n\r\n  useEffect(() => {\r\n    console.log(client);\r\n    const unsubscribe = store.subscribe(() => {\r\n      setClient(store.getState().authState.client);\r\n      return unsubscribe;\r\n    });\r\n  });\r\n\r\n  const theme = createTheme({\r\n    palette: {\r\n      type: darkMode ? 'dark' : 'light',\r\n    }\r\n  })\r\n\r\n  const handleDarkMode = () => {\r\n    setDarkMode(!darkMode);\r\n  }\r\n  \r\n  function mode(){\r\n    setDarkMode(!darkMode);\r\n  }\r\n \r\n  return (\r\n    <HashRouter >\r\n     <ThemeProvider theme={theme}>\r\n      <CssBaseline>\r\n       <Container className=\"App\" >\r\n\r\n{/* <Header /> */}\r\n\r\n<>\r\n      <Toolbar>\r\n        <IconButton color=\"inherit\">\r\n          <SideBar>\r\n            <MenuIcon />\r\n          </SideBar>\r\n        </IconButton>\r\n\r\n        <Typography variant=\"h5\" className={classes.title}>\r\n          <animated.h5 style={props}>\r\n         \r\n            <NavLink to={\"/home\"} className={classes.link}>\r\n           \r\n            <Button >Coupons</Button>\r\n          \r\n           \r\n            </NavLink>\r\n          \r\n          </animated.h5>\r\n        \r\n          </Typography>\r\n\r\n        <span>\r\n        \r\n          {client === null ? (\r\n            <span>hello guest</span>\r\n          ) : (\r\n            <span> hello {client?.name}</span>\r\n          )}{\" \"}\r\n          &nbsp;&nbsp;&nbsp;&nbsp;\r\n        </span>\r\n        {client === null ? (\r\n          <span>\r\n            <NavLink to={\"/register\"}className={classes.link}>\r\n            <Button>register</Button>\r\n            </NavLink>\r\n         \r\n            &nbsp;&nbsp;\r\n           \r\n            <NavLink to={\"/login\"} className={classes.link}>\r\n            <Button>login</Button>\r\n           \r\n            </NavLink>\r\n         \r\n          </span>\r\n        ) : (\r\n          <NavLink to={\"/logout\"} className={classes.link}>\r\n             <Button>logout</Button>\r\n            </NavLink>\r\n         \r\n        )}\r\n\r\n        <IconButton color=\"inherit\">\r\n         \r\n          <Badge badgeContent={client===null?0:4} color=\"secondary\">\r\n            <NotificationsIcon />\r\n          </Badge>\r\n        </IconButton>\r\n\r\n        <IconButton color=\"inherit\">\r\n          <AccountCircleIcon />\r\n        </IconButton>\r\n        {darkMode===true ?<IconButton onClick={()=>mode()}><Brightness7Icon style={{fill: \"yellow\"}}/></IconButton >:<IconButton onClick={()=>mode()}><Brightness2Icon/></IconButton>}\r\n\r\n      </Toolbar>\r\n\r\n\r\n      <Divider />\r\n\r\n      <Toolbar className={classes.tagline}>welcome to the Coupons web</Toolbar>\r\n    </>\r\n\r\n      \r\n         <Routing />\r\n     \r\n       </Container>\r\n       </CssBaseline>\r\n     </ThemeProvider>\r\n    \r\n    </HashRouter>\r\n  );\r\n  {\r\n    /* <header className=\"header\">\r\n     {/* <Header /> */\r\n  }\r\n  {\r\n    /* <Layout/> */\r\n  }\r\n  {\r\n    /* <DeleteEmployees/> */\r\n  }\r\n  {\r\n    /* <ShowEmplHooks/> */\r\n  }\r\n  {\r\n    /* <AddEmployee/> */\r\n  }\r\n  {\r\n    /* <Employees/> */\r\n  }\r\n  {\r\n    /* <AddEmployeeRedux/> */\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}